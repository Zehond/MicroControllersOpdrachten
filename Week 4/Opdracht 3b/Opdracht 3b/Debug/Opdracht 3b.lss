
Opdracht 3b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000926  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000860  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000313  00000000  00000000  0000136e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	1d d0       	rcall	.+58     	; 0xd4 <main>
  9a:	27 c0       	rjmp	.+78     	; 0xea <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	08 c0       	rjmp	.+16     	; 0xb4 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e3 ec       	ldi	r30, 0xC3	; 195
  a6:	f9 e0       	ldi	r31, 0x09	; 9
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <wait+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <wait+0x10>
  ae:	00 00       	nop
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	ac f3       	brlt	.-22     	; 0xa4 <wait+0x6>
	{
		_delay_ms( 1 );			// library function (max 30 ms at 8MHz)
	}
}
  ba:	08 95       	ret

000000bc <adcInit>:


// Initialize ADC: 10-bits (left justified), free running
void adcInit( void )
{
	ADMUX = 0b11100011;			// AREF=2.56V, result left adjusted (ADLAR == 1), channel 3 at pin PF3
  bc:	83 ee       	ldi	r24, 0xE3	; 227
  be:	87 b9       	out	0x07, r24	; 7
	//bit 7-8:vref == vcc. bit 6:ADLAR = 1 left adjusted. bits 4-0: selecteer ADC1 (PF1) dus channel 1 en pf1
	ADCSRA = 0b10000110;		// ADC-enable, no interrupt, start, free running, division by 64
  c0:	86 e8       	ldi	r24, 0x86	; 134
  c2:	86 b9       	out	0x06, r24	; 6
  c4:	08 95       	ret

000000c6 <readADC>:
	
	//free runnning: blijft continu de data registers updaten, totdat ze geterminated worden. 
}
uint8_t readADC(void)
{
	ADCSRA |= (1 << ADSC);        // Start conversie
  c6:	86 b1       	in	r24, 0x06	; 6
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1 << ADSC)); // Wachten tot conversie klaar is
  cc:	36 99       	sbic	0x06, 6	; 6
  ce:	fe cf       	rjmp	.-4      	; 0xcc <readADC+0x6>
	return ADCH;                  // Alleen de 8 meest significante bits
  d0:	85 b1       	in	r24, 0x05	; 5
}
  d2:	08 95       	ret

000000d4 <main>:

int main(void)
{
	DDRF = 0x00;  // PORTF als input (ADC)
  d4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF;  // PORTA als output (voor de ADC waarde)
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	8a bb       	out	0x1a, r24	; 26

	adcInit();  
  dc:	ef df       	rcall	.-34     	; 0xbc <adcInit>

	while (1)
	{
		PORTA = readADC(); // Start conversie en toon resultaat
  de:	f3 df       	rcall	.-26     	; 0xc6 <readADC>
  e0:	8b bb       	out	0x1b, r24	; 27
  e2:	84 ef       	ldi	r24, 0xF4	; 244
		wait(500);         
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	db df       	rcall	.-74     	; 0x9e <wait>
  e8:	fa cf       	rjmp	.-12     	; 0xde <main+0xa>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
