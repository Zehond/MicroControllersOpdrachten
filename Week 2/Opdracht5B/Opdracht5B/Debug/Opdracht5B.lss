
Opdracht5B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001e2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bd9  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b9  00000000  00000000  00000f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a2  00000000  00000000  000017ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000489  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002cd  00000000  00000000  000021d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000249e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ee       	ldi	r30, 0xE2	; 226
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	7c d0       	rcall	.+248    	; 0x1ac <main>
  b4:	94 c0       	rjmp	.+296    	; 0x1de <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
void display_text(char *str){
	for(;*str; str++){
		lcd_write_data(*str);
	}
}
void init(){
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	08 c0       	rjmp	.+16     	; 0xce <wait+0x16>
  be:	e3 ec       	ldi	r30, 0xC3	; 195
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <wait+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <wait+0x10>
  c8:	00 00       	nop
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	28 17       	cp	r18, r24
  d0:	39 07       	cpc	r19, r25
  d2:	ac f3       	brlt	.-22     	; 0xbe <wait+0x6>
  d4:	08 95       	ret

000000d6 <lcd_strobe_lcd_e>:
	lcd_write_command(0x80 + position);
	//0x80 is de hex voor de standaard plek voor de cursor. dit is 16x2 dus dit zou juist nu 0 moeten zijn. dus links boven
	}

void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	83 ec       	ldi	r24, 0xC3	; 195
  de:	99 e0       	ldi	r25, 0x09	; 9
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_strobe_lcd_e+0xa>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_strobe_lcd_e+0x10>
  e6:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
  e8:	8b b3       	in	r24, 0x1b	; 27
  ea:	8f 7b       	andi	r24, 0xBF	; 191
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	83 ec       	ldi	r24, 0xC3	; 195
  f0:	99 e0       	ldi	r25, 0x09	; 9
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_strobe_lcd_e+0x1c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_strobe_lcd_e+0x22>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <init_4bits_mode>:
	_delay_ms(1);			// nodig?
}


void init_4bits_mode(void) {
  fc:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRD = 0xFF;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 102:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 104:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 106:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 108:	c0 e2       	ldi	r28, 0x20	; 32
 10a:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 10c:	e4 df       	rcall	.-56     	; 0xd6 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	lcd_strobe_lcd_e();
 10e:	c5 bb       	out	0x15, r28	; 21
 110:	e2 df       	rcall	.-60     	; 0xd6 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 112:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
 114:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 116:	df df       	rcall	.-66     	; 0xd6 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 118:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 11a:	dd df       	rcall	.-70     	; 0xd6 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 11c:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 11e:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 120:	da df       	rcall	.-76     	; 0xd6 <lcd_strobe_lcd_e>
 122:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 124:	d8 df       	rcall	.-80     	; 0xd6 <lcd_strobe_lcd_e>
 126:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e();
 128:	85 bb       	out	0x15, r24	; 21
 12a:	d5 df       	rcall	.-86     	; 0xd6 <lcd_strobe_lcd_e>
}
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <lcd_write_data>:




void lcd_write_data(unsigned char byte) {
 130:	cf 93       	push	r28
 132:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 134:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 136:	8b b3       	in	r24, 0x1b	; 27
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 13c:	cc df       	rcall	.-104    	; 0xd6 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 13e:	c2 95       	swap	r28
 140:	c0 7f       	andi	r28, 0xF0	; 240
 142:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 144:	8b b3       	in	r24, 0x1b	; 27
 146:	80 61       	ori	r24, 0x10	; 16
	lcd_strobe_lcd_e();
 148:	8b bb       	out	0x1b, r24	; 27
 14a:	c5 df       	rcall	.-118    	; 0xd6 <lcd_strobe_lcd_e>
}
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <display_text>:
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
void display_text(char *str){
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
	for(;*str; str++){
 156:	02 c0       	rjmp	.+4      	; 0x15c <display_text+0xc>
		lcd_write_data(*str);
 158:	eb df       	rcall	.-42     	; 0x130 <lcd_write_data>
	for (int i=0; i<ms; i++) {
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
void display_text(char *str){
	for(;*str; str++){
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	88 81       	ld	r24, Y
 15e:	81 11       	cpse	r24, r1
 160:	fb cf       	rjmp	.-10     	; 0x158 <display_text+0x8>
		lcd_write_data(*str);
	}
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_write_command>:
	PORTA |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
}


void lcd_write_command(unsigned char byte) {
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 16c:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 16e:	8b b3       	in	r24, 0x1b	; 27
 170:	8f 7e       	andi	r24, 0xEF	; 239
 172:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 174:	b0 df       	rcall	.-160    	; 0xd6 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 176:	c2 95       	swap	r28
 178:	c0 7f       	andi	r28, 0xF0	; 240
 17a:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 17c:	8b b3       	in	r24, 0x1b	; 27
 17e:	8f 7e       	andi	r24, 0xEF	; 239
	lcd_strobe_lcd_e();
 180:	8b bb       	out	0x1b, r24	; 27
 182:	a9 df       	rcall	.-174    	; 0xd6 <lcd_strobe_lcd_e>
}
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <set_cursor>:
}
void init(){
	
}
void set_cursor(int position){
	if (position < 0 || position > 15) return;  //het kan niet hoger dan 15, je moet dan op de 2de rij zien te komen nog niet gelukt
 188:	80 31       	cpi	r24, 0x10	; 16
 18a:	91 05       	cpc	r25, r1
 18c:	18 f4       	brcc	.+6      	; 0x194 <set_cursor+0xc>

	lcd_write_command(0x80 + position);
 18e:	80 58       	subi	r24, 0x80	; 128
 190:	9f 4f       	sbci	r25, 0xFF	; 255
 192:	ea cf       	rjmp	.-44     	; 0x168 <lcd_write_command>
 194:	08 95       	ret

00000196 <lcd_clear>:
	lcd_strobe_lcd_e();
}


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	e7 df       	rcall	.-50     	; 0x168 <lcd_write_command>
 19a:	87 e8       	ldi	r24, 0x87	; 135
 19c:	93 e1       	ldi	r25, 0x13	; 19
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_clear+0x8>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_clear+0xe>
 1a4:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 1a6:	80 e8       	ldi	r24, 0x80	; 128
 1a8:	df cf       	rjmp	.-66     	; 0x168 <lcd_write_command>
 1aa:	08 95       	ret

000001ac <main>:
}

void main(void){
	// Init I/O
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 1b0:	85 bb       	out	0x15, r24	; 21

	// Init LCD
	init_4bits_mode();
 1b2:	a4 df       	rcall	.-184    	; 0xfc <init_4bits_mode>
 1b4:	87 ea       	ldi	r24, 0xA7	; 167
 1b6:	91 e6       	ldi	r25, 0x61	; 97
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0xc>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x12>
	
	_delay_ms(10);
	
	lcd_clear();
 1be:	00 00       	nop
 1c0:	ea df       	rcall	.-44     	; 0x196 <lcd_clear>

	// Write sample string
	display_text("Hello world!!!!");
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	c4 df       	rcall	.-120    	; 0x150 <display_text>
	
	set_cursor(5);
 1c8:	85 e0       	ldi	r24, 0x05	; 5
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	dd df       	rcall	.-70     	; 0x188 <set_cursor>
 1ce:	95 b3       	in	r25, 0x15	; 21

	// Loop forever
	while (1) {
		PORTC ^= (1<<0);	// Toggle PORTD.7
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	89 27       	eor	r24, r25
 1d4:	85 bb       	out	0x15, r24	; 21
		wait( 250 );
 1d6:	8a ef       	ldi	r24, 0xFA	; 250
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	6e df       	rcall	.-292    	; 0xb8 <wait>
 1dc:	f8 cf       	rjmp	.-16     	; 0x1ce <main+0x22>

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
