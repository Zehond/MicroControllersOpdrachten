
EindOpdracht_D_S.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000728  000007bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000728  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800108  00800108  000007c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f9  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a31  00000000  00000000  00001bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000874  00000000  00000000  0000262a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00002ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065f  00000000  00000000  00003148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b85  00000000  00000000  000037a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000432c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c3 c2       	rjmp	.+1414   	; 0x5b8 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e2       	ldi	r30, 0x28	; 40
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 31       	cpi	r26, 0x13	; 19
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a7 d2       	rcall	.+1358   	; 0x612 <main>
  c4:	2f c3       	rjmp	.+1630   	; 0x724 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_button>:
}

/* Initializes button for interrupts */
//button when pressed is on low en normal is high
void init_button() {
	BUTTON_DDR &= ~(1 << BUTTON_PIN);  // Set button pin as input
  c8:	8a b3       	in	r24, 0x1a	; 26
  ca:	8b 7f       	andi	r24, 0xFB	; 251
  cc:	8a bb       	out	0x1a, r24	; 26
	BUTTON_PORT |= (1 << BUTTON_PIN);  // Set internal pull-up resistance
  ce:	8b b3       	in	r24, 0x1b	; 27
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	8b bb       	out	0x1b, r24	; 27
  d4:	08 95       	ret

000000d6 <is_button_pressed>:
}

/* Button pressed event */
int is_button_pressed() {
	return !(BUTTON_PINA & (1 << BUTTON_PIN));  // Return 1 if button is pressed (LOW)
  d6:	89 b3       	in	r24, 0x19	; 25
  d8:	86 95       	lsr	r24
  da:	86 95       	lsr	r24
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	89 27       	eor	r24, r25
}
  e0:	81 70       	andi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	08 95       	ret

000000e6 <delay_us_variable>:

/* Custom method to delay for X microseconds
   This code was made by AI! */
void delay_us_variable(uint16_t us) {
	while (us--) {
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <delay_us_variable+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <delay_us_variable+0x4>
  ee:	00 00       	nop
  f0:	c9 01       	movw	r24, r18
  f2:	9c 01       	movw	r18, r24
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	31 09       	sbc	r19, r1
  f8:	89 2b       	or	r24, r25
  fa:	b1 f7       	brne	.-20     	; 0xe8 <delay_us_variable+0x2>
		_delay_us(1);  // 1 µs fixed delay inside loop
	}
}
  fc:	08 95       	ret

000000fe <init_spi>:

/* Init method for the 7 segment display (SPI) */
void init_spi(void) {
	DDR_SPI = 0xff;								// All pins output: MOSI, SCK, SS, SS_display as output
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~BIT(SPI_MISO);					// 	except: MISO input
 102:	87 b3       	in	r24, 0x17	; 23
 104:	87 7f       	andi	r24, 0xF7	; 247
 106:	87 bb       	out	0x17, r24	; 23
	PORT_SPI |= BIT(SPI_SS);					// SS_ADC == 1: deselect slave
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR1);	// or: SPCR = 0b11010010;
 10e:	82 e5       	ldi	r24, 0x52	; 82
 110:	8d b9       	out	0x0d, r24	; 13
 112:	08 95       	ret

00000114 <spi_write>:
	// Mode = 0: CPOL=0, CPPH=0;
}

/* Write a byte from master to slave */
void spi_write(unsigned char data) {
	SPDR = data;							// Load byte to Data register --> starts transmission
 114:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & BIT(SPIF))); 			// Wait for transmission complete
 116:	77 9b       	sbis	0x0e, 7	; 14
 118:	fe cf       	rjmp	.-4      	; 0x116 <spi_write+0x2>
}
 11a:	08 95       	ret

0000011c <spi_slave_select>:

/* Select device on pinnumer PORTB (7 segment display) */
void spi_slave_select(unsigned char chipNumber) {
	PORTB &= ~BIT(chipNumber);
 11c:	98 b3       	in	r25, 0x18	; 24
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <spi_slave_select+0xc>
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	8a 95       	dec	r24
 12a:	e2 f7       	brpl	.-8      	; 0x124 <spi_slave_select+0x8>
 12c:	20 95       	com	r18
 12e:	29 23       	and	r18, r25
 130:	28 bb       	out	0x18, r18	; 24
 132:	08 95       	ret

00000134 <spi_slave_deselect>:
}

/* Deselect device on pinnumer PORTB (7 segment display) */
void spi_slave_deselect(unsigned char chipNumber) {
	PORTB |= BIT(chipNumber);
 134:	98 b3       	in	r25, 0x18	; 24
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <spi_slave_deselect+0xc>
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	8a 95       	dec	r24
 142:	e2 f7       	brpl	.-8      	; 0x13c <spi_slave_deselect+0x8>
 144:	29 2b       	or	r18, r25
 146:	28 bb       	out	0x18, r18	; 24
 148:	08 95       	ret

0000014a <spi_write_word>:
}

/* Write a character to slave */
void spi_write_word (unsigned char adress, unsigned char data) {
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	d8 2f       	mov	r29, r24
 150:	c6 2f       	mov	r28, r22
	spi_slave_select(0);			// Select display chip
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	e3 df       	rcall	.-58     	; 0x11c <spi_slave_select>
	spi_write(adress);      		// Register 0A: Intensity
 156:	8d 2f       	mov	r24, r29
 158:	dd df       	rcall	.-70     	; 0x114 <spi_write>
	spi_write(data);    			// -> Level in specified range
 15a:	8c 2f       	mov	r24, r28
 15c:	db df       	rcall	.-74     	; 0x114 <spi_write>
	spi_slave_deselect(0);			// Deselect display chip
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	e9 df       	rcall	.-46     	; 0x134 <spi_slave_deselect>
 162:	df 91       	pop	r29
}
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <play_beep_sound>:
 168:	8f 92       	push	r8

/* Custom method to create 'BEEP' sound
   This code was written with help from AI! */
void play_beep_sound(uint16_t frequency, uint16_t durationMs) {
 16a:	9f 92       	push	r9
 16c:	af 92       	push	r10
 16e:	bf 92       	push	r11
 170:	cf 92       	push	r12
 172:	df 92       	push	r13
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	5b 01       	movw	r10, r22
	uint32_t delayTime = (500000UL / frequency); // Half-period (half of total time) in µs
 17e:	9c 01       	movw	r18, r24
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	60 e2       	ldi	r22, 0x20	; 32
 186:	71 ea       	ldi	r23, 0xA1	; 161
 188:	87 e0       	ldi	r24, 0x07	; 7
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	86 d2       	rcall	.+1292   	; 0x69a <__udivmodsi4>
 18e:	69 01       	movw	r12, r18
 190:	7a 01       	movw	r14, r20
 192:	c2 2f       	mov	r28, r18
 194:	dd 2d       	mov	r29, r13
	uint32_t numCycles = ((uint32_t)durationMs * 1000) / (delayTime * 2UL); // Amount of cycles ON/OFF
 196:	95 01       	movw	r18, r10
 198:	a8 ee       	ldi	r26, 0xE8	; 232
 19a:	b3 e0       	ldi	r27, 0x03	; 3
 19c:	a0 d2       	rcall	.+1344   	; 0x6de <__umulhisi3>
 19e:	a7 01       	movw	r20, r14
 1a0:	96 01       	movw	r18, r12
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	44 1f       	adc	r20, r20
 1a8:	55 1f       	adc	r21, r21
 1aa:	77 d2       	rcall	.+1262   	; 0x69a <__udivmodsi4>
 1ac:	69 01       	movw	r12, r18
 1ae:	7a 01       	movw	r14, r20

	if (isNegative){
 1b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1b4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 1b8:	89 2b       	or	r24, r25
 1ba:	61 f0       	breq	.+24     	; 0x1d4 <play_beep_sound+0x6c>
		PORTC |= (1 << PC1);  // Turn buzzer ON
 1bc:	85 b3       	in	r24, 0x15	; 21
 1be:	82 60       	ori	r24, 0x02	; 2
		delay_us_variable(1000);
 1c0:	85 bb       	out	0x15, r24	; 21
 1c2:	88 ee       	ldi	r24, 0xE8	; 232
 1c4:	93 e0       	ldi	r25, 0x03	; 3
 1c6:	8f df       	rcall	.-226    	; 0xe6 <delay_us_variable>
		PORTC &= ~(1 << PC1);  // Turn buzzer OFF
 1c8:	85 b3       	in	r24, 0x15	; 21
 1ca:	8d 7f       	andi	r24, 0xFD	; 253
		delay_us_variable(1000);
 1cc:	85 bb       	out	0x15, r24	; 21
 1ce:	88 ee       	ldi	r24, 0xE8	; 232
 1d0:	93 e0       	ldi	r25, 0x03	; 3
 1d2:	89 df       	rcall	.-238    	; 0xe6 <delay_us_variable>
	spi_slave_deselect(0);			// Deselect display chip
}

/* Custom method to create 'BEEP' sound
   This code was written with help from AI! */
void play_beep_sound(uint16_t frequency, uint16_t durationMs) {
 1d4:	81 2c       	mov	r8, r1
 1d6:	91 2c       	mov	r9, r1
 1d8:	54 01       	movw	r10, r8
 1da:	11 c0       	rjmp	.+34     	; 0x1fe <play_beep_sound+0x96>
		PORTC &= ~(1 << PC1);  // Turn buzzer OFF
		delay_us_variable(1000);
	}
	
	for (uint32_t i = 0; i < numCycles; i++) {
		PORTC |= (1 << PC1);  // Turn buzzer ON
 1dc:	85 b3       	in	r24, 0x15	; 21
 1de:	82 60       	ori	r24, 0x02	; 2
		delay_us_variable(delayTime);
 1e0:	85 bb       	out	0x15, r24	; 21
 1e2:	8c 2f       	mov	r24, r28
 1e4:	9d 2f       	mov	r25, r29
		PORTC &= ~(1 << PC1);  // Turn buzzer OFF
 1e6:	7f df       	rcall	.-258    	; 0xe6 <delay_us_variable>
 1e8:	85 b3       	in	r24, 0x15	; 21
 1ea:	8d 7f       	andi	r24, 0xFD	; 253
		delay_us_variable(delayTime);
 1ec:	85 bb       	out	0x15, r24	; 21
 1ee:	8c 2f       	mov	r24, r28
 1f0:	9d 2f       	mov	r25, r29
 1f2:	79 df       	rcall	.-270    	; 0xe6 <delay_us_variable>
		delay_us_variable(1000);
		PORTC &= ~(1 << PC1);  // Turn buzzer OFF
		delay_us_variable(1000);
	}
	
	for (uint32_t i = 0; i < numCycles; i++) {
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	88 1a       	sub	r8, r24
 1f8:	98 0a       	sbc	r9, r24
 1fa:	a8 0a       	sbc	r10, r24
 1fc:	b8 0a       	sbc	r11, r24
 1fe:	8c 14       	cp	r8, r12
 200:	9d 04       	cpc	r9, r13
 202:	ae 04       	cpc	r10, r14
 204:	bf 04       	cpc	r11, r15
 206:	50 f3       	brcs	.-44     	; 0x1dc <play_beep_sound+0x74>
		PORTC |= (1 << PC1);  // Turn buzzer ON
		delay_us_variable(delayTime);
		PORTC &= ~(1 << PC1);  // Turn buzzer OFF
		delay_us_variable(delayTime);
	}
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	df 90       	pop	r13
 212:	cf 90       	pop	r12
 214:	bf 90       	pop	r11
 216:	af 90       	pop	r10
 218:	9f 90       	pop	r9
 21a:	8f 90       	pop	r8
 21c:	08 95       	ret

0000021e <beep_for_digit>:

/* Beeps for a digit with a certain amount and frequency */
void beep_for_digit(int digit, int frequency) {
 21e:	cf 92       	push	r12
 220:	df 92       	push	r13
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
	if (digit == 0) {
 22e:	00 97       	sbiw	r24, 0x00	; 0
 230:	11 f1       	breq	.+68     	; 0x276 <beep_for_digit+0x58>
 232:	8b 01       	movw	r16, r22
 234:	ec 01       	movw	r28, r24
 236:	c1 2c       	mov	r12, r1
 238:	d1 2c       	mov	r13, r1
 23a:	76 01       	movw	r14, r12
 23c:	12 c0       	rjmp	.+36     	; 0x262 <beep_for_digit+0x44>
		return;
	}
	
	for (uint32_t i = 0; i < digit; i++) {
		play_beep_sound(frequency, 100);  // Beep at set frequency for 100 milliseconds
 23e:	64 e6       	ldi	r22, 0x64	; 100
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	c8 01       	movw	r24, r16
 244:	91 df       	rcall	.-222    	; 0x168 <play_beep_sound>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	2f e3       	ldi	r18, 0x3F	; 63
 248:	8d e0       	ldi	r24, 0x0D	; 13
 24a:	93 e0       	ldi	r25, 0x03	; 3
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <beep_for_digit+0x2e>
 254:	00 c0       	rjmp	.+0      	; 0x256 <beep_for_digit+0x38>
 256:	00 00       	nop
void beep_for_digit(int digit, int frequency) {
	if (digit == 0) {
		return;
	}
	
	for (uint32_t i = 0; i < digit; i++) {
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	c2 1a       	sub	r12, r18
 25c:	d2 0a       	sbc	r13, r18
 25e:	e2 0a       	sbc	r14, r18
 260:	f2 0a       	sbc	r15, r18
 262:	ce 01       	movw	r24, r28
 264:	0d 2e       	mov	r0, r29
 266:	00 0c       	add	r0, r0
 268:	aa 0b       	sbc	r26, r26
 26a:	bb 0b       	sbc	r27, r27
 26c:	c8 16       	cp	r12, r24
 26e:	d9 06       	cpc	r13, r25
 270:	ea 06       	cpc	r14, r26
 272:	fb 06       	cpc	r15, r27
 274:	20 f3       	brcs	.-56     	; 0x23e <beep_for_digit+0x20>
		play_beep_sound(frequency, 100);  // Beep at set frequency for 100 milliseconds
		_delay_ms(100); // Wait 100 milliseconds before next beep
	}
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	df 90       	pop	r13
 284:	cf 90       	pop	r12
 286:	08 95       	ret

00000288 <display_numbers>:

/* Helper method to quickly display digits */
void display_numbers(int digit1, int digit2, int digit3, int digit4) {
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	16 2f       	mov	r17, r22
 290:	d4 2f       	mov	r29, r20
 292:	c2 2f       	mov	r28, r18
	spi_write_word(1, digit1);
 294:	68 2f       	mov	r22, r24
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	58 df       	rcall	.-336    	; 0x14a <spi_write_word>
	spi_write_word(2, digit2);
 29a:	61 2f       	mov	r22, r17
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	55 df       	rcall	.-342    	; 0x14a <spi_write_word>
	spi_write_word(3, digit3);
 2a0:	6d 2f       	mov	r22, r29
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	52 df       	rcall	.-348    	; 0x14a <spi_write_word>
	spi_write_word(4, digit4);
 2a6:	6c 2f       	mov	r22, r28
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	4f df       	rcall	.-354    	; 0x14a <spi_write_word>
 2ac:	df 91       	pop	r29
}
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	08 95       	ret

000002b4 <calculate_digits>:
 2b4:	6f 92       	push	r6

/* Writes a number value to the 7 segment display 
   The number can be both positive and negative, and include decimals */
void calculate_digits(int temp) {
 2b6:	7f 92       	push	r7
 2b8:	8f 92       	push	r8
 2ba:	9f 92       	push	r9
 2bc:	af 92       	push	r10
 2be:	bf 92       	push	r11
 2c0:	cf 92       	push	r12
 2c2:	df 92       	push	r13
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	9c 01       	movw	r18, r24
	isNegative = 0;
 2d2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 2d6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
	if (temp < 0) {
 2da:	99 23       	and	r25, r25
 2dc:	4c f4       	brge	.+18     	; 0x2f0 <calculate_digits+0x3c>
		isNegative = 1;	// Mark number as negative
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 2e6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		temp = -(temp);  // Make positive
 2ea:	31 95       	neg	r19
 2ec:	21 95       	neg	r18
 2ee:	31 09       	sbc	r19, r1
	}

	// NOTE: The DHT11 sensor cannot read digits after the ','. We need a DHT22 for those digits.
	// Get individual numbers to display
	int digit1 = temp % 10;       // Single units
 2f0:	ea e0       	ldi	r30, 0x0A	; 10
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	c9 01       	movw	r24, r18
 2f6:	bf 01       	movw	r22, r30
 2f8:	bd d1       	rcall	.+890    	; 0x674 <__divmodhi4>
 2fa:	c8 2e       	mov	r12, r24
 2fc:	d9 2e       	mov	r13, r25
 2fe:	e8 2e       	mov	r14, r24
 300:	f9 2e       	mov	r15, r25
	int digit2 = (temp / 10) % 10; // Tens
 302:	cb 01       	movw	r24, r22
 304:	bf 01       	movw	r22, r30
 306:	b6 d1       	rcall	.+876    	; 0x674 <__divmodhi4>
 308:	a8 2e       	mov	r10, r24
 30a:	b9 2e       	mov	r11, r25
 30c:	08 2f       	mov	r16, r24
 30e:	19 2f       	mov	r17, r25
	int digit3 = (temp / 100) % 10; // Hunderds
 310:	c9 01       	movw	r24, r18
 312:	64 e6       	ldi	r22, 0x64	; 100
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	ae d1       	rcall	.+860    	; 0x674 <__divmodhi4>
 318:	cb 01       	movw	r24, r22
 31a:	bf 01       	movw	r22, r30
 31c:	ab d1       	rcall	.+854    	; 0x674 <__divmodhi4>
 31e:	88 2e       	mov	r8, r24
 320:	99 2e       	mov	r9, r25
 322:	c8 2f       	mov	r28, r24
 324:	d9 2f       	mov	r29, r25
	int digit4 = (temp / 1000) % 10; // Thousands
 326:	c9 01       	movw	r24, r18
 328:	68 ee       	ldi	r22, 0xE8	; 232
 32a:	73 e0       	ldi	r23, 0x03	; 3
 32c:	a3 d1       	rcall	.+838    	; 0x674 <__divmodhi4>
 32e:	cb 01       	movw	r24, r22
 330:	bf 01       	movw	r22, r30
 332:	a0 d1       	rcall	.+832    	; 0x674 <__divmodhi4>
 334:	68 2e       	mov	r6, r24
 336:	79 2e       	mov	r7, r25
 338:	00 97       	sbiw	r24, 0x00	; 0
	
	// Display the numbers (0x0A = '-' and 0x0F = empty)
	if (digit4 == 0 && digit3 != 0 && digit2 != 0 && digit1 != 0) {
 33a:	11 f5       	brne	.+68     	; 0x380 <calculate_digits+0xcc>
 33c:	20 97       	sbiw	r28, 0x00	; 0
 33e:	01 f1       	breq	.+64     	; 0x380 <calculate_digits+0xcc>
 340:	01 15       	cp	r16, r1
 342:	11 05       	cpc	r17, r1
 344:	e9 f0       	breq	.+58     	; 0x380 <calculate_digits+0xcc>
 346:	e1 14       	cp	r14, r1
 348:	f1 04       	cpc	r15, r1
 34a:	d1 f0       	breq	.+52     	; 0x380 <calculate_digits+0xcc>
 34c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
		if (isNegative) {
 350:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 354:	89 2b       	or	r24, r25
 356:	51 f0       	breq	.+20     	; 0x36c <calculate_digits+0xb8>
 358:	2a e0       	ldi	r18, 0x0A	; 10
			display_numbers(digit1, digit2, digit3, 0x0A);
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	48 2d       	mov	r20, r8
 35e:	59 2d       	mov	r21, r9
 360:	6a 2d       	mov	r22, r10
 362:	7b 2d       	mov	r23, r11
 364:	8c 2d       	mov	r24, r12
 366:	9d 2d       	mov	r25, r13
 368:	8f df       	rcall	.-226    	; 0x288 <display_numbers>
 36a:	70 c0       	rjmp	.+224    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 36c:	2f e0       	ldi	r18, 0x0F	; 15
		} else {
			display_numbers(digit1, digit2, digit3, 0x0F);
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	48 2d       	mov	r20, r8
 372:	59 2d       	mov	r21, r9
 374:	6a 2d       	mov	r22, r10
 376:	7b 2d       	mov	r23, r11
 378:	8c 2d       	mov	r24, r12
 37a:	9d 2d       	mov	r25, r13
 37c:	85 df       	rcall	.-246    	; 0x288 <display_numbers>
 37e:	66 c0       	rjmp	.+204    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 380:	00 97       	sbiw	r24, 0x00	; 0
		}
	} else if (digit4 == 0 && digit3 == 0 && digit2 != 0 && digit1 != 0) {
 382:	11 f5       	brne	.+68     	; 0x3c8 <calculate_digits+0x114>
 384:	20 97       	sbiw	r28, 0x00	; 0
 386:	01 f5       	brne	.+64     	; 0x3c8 <calculate_digits+0x114>
 388:	01 15       	cp	r16, r1
 38a:	11 05       	cpc	r17, r1
 38c:	e9 f0       	breq	.+58     	; 0x3c8 <calculate_digits+0x114>
 38e:	e1 14       	cp	r14, r1
 390:	f1 04       	cpc	r15, r1
 392:	d1 f0       	breq	.+52     	; 0x3c8 <calculate_digits+0x114>
 394:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
		if (isNegative) {
 398:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 39c:	89 2b       	or	r24, r25
 39e:	51 f0       	breq	.+20     	; 0x3b4 <calculate_digits+0x100>
 3a0:	2f e0       	ldi	r18, 0x0F	; 15
			display_numbers(digit1, digit2, 0x0A, 0x0F);
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	4a e0       	ldi	r20, 0x0A	; 10
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	6a 2d       	mov	r22, r10
 3aa:	7b 2d       	mov	r23, r11
 3ac:	8c 2d       	mov	r24, r12
 3ae:	9d 2d       	mov	r25, r13
 3b0:	6b df       	rcall	.-298    	; 0x288 <display_numbers>
 3b2:	4c c0       	rjmp	.+152    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3b4:	2f e0       	ldi	r18, 0x0F	; 15
		} else {
			display_numbers(digit1, digit2, 0x0F, 0x0F);
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	4f e0       	ldi	r20, 0x0F	; 15
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	6a 2d       	mov	r22, r10
 3be:	7b 2d       	mov	r23, r11
 3c0:	8c 2d       	mov	r24, r12
 3c2:	9d 2d       	mov	r25, r13
 3c4:	61 df       	rcall	.-318    	; 0x288 <display_numbers>
 3c6:	42 c0       	rjmp	.+132    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	f9 f4       	brne	.+62     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		}
	} else if (digit4 == 0 && digit3 == 0 && digit2 == 0) {
 3cc:	20 97       	sbiw	r28, 0x00	; 0
 3ce:	e9 f4       	brne	.+58     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3d0:	01 15       	cp	r16, r1
 3d2:	11 05       	cpc	r17, r1
 3d4:	d1 f4       	brne	.+52     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
		if (isNegative) {
 3da:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 3de:	89 2b       	or	r24, r25
 3e0:	51 f0       	breq	.+20     	; 0x3f6 <calculate_digits+0x142>
 3e2:	2f e0       	ldi	r18, 0x0F	; 15
			display_numbers(digit1, 0x0A, 0x0F, 0x0F);
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	4f e0       	ldi	r20, 0x0F	; 15
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	6a e0       	ldi	r22, 0x0A	; 10
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	8c 2d       	mov	r24, r12
 3f0:	9d 2d       	mov	r25, r13
 3f2:	4a df       	rcall	.-364    	; 0x288 <display_numbers>
 3f4:	2b c0       	rjmp	.+86     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3f6:	2f e0       	ldi	r18, 0x0F	; 15
		} else {
			display_numbers(digit1, 0x0F, 0x0F, 0x0F);
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	4f e0       	ldi	r20, 0x0F	; 15
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	6f e0       	ldi	r22, 0x0F	; 15
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	8c 2d       	mov	r24, r12
 404:	9d 2d       	mov	r25, r13
 406:	40 df       	rcall	.-384    	; 0x288 <display_numbers>
 408:	21 c0       	rjmp	.+66     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 40a:	89 2b       	or	r24, r25
 40c:	f9 f4       	brne	.+62     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		}
	} else if (digit4 == 0 && digit3 == 0 && digit2 != 0 && digit1 == 0) {
 40e:	cd 2b       	or	r28, r29
 410:	e9 f4       	brne	.+58     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 412:	01 2b       	or	r16, r17
 414:	d9 f0       	breq	.+54     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 416:	ef 28       	or	r14, r15
 418:	c9 f4       	brne	.+50     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 41a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
		if (isNegative) {
 41e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 422:	89 2b       	or	r24, r25
 424:	51 f0       	breq	.+20     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 426:	2f e0       	ldi	r18, 0x0F	; 15
			display_numbers(0, 0x0A, 0x0F, 0x0F);
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	4f e0       	ldi	r20, 0x0F	; 15
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	6a e0       	ldi	r22, 0x0A	; 10
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	28 df       	rcall	.-432    	; 0x288 <display_numbers>
 438:	09 c0       	rjmp	.+18     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 43a:	2f e0       	ldi	r18, 0x0F	; 15
		} else {
			display_numbers(0, 0x0F, 0x0F, 0x0F);
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	4f e0       	ldi	r20, 0x0F	; 15
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	6f e0       	ldi	r22, 0x0F	; 15
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	1e df       	rcall	.-452    	; 0x288 <display_numbers>
 44c:	eb e0       	ldi	r30, 0x0B	; 11
 44e:	f1 e0       	ldi	r31, 0x01	; 1
		}
	}
	
	digitsToBeep[0] = digit4;
 450:	60 82       	st	Z, r6
 452:	71 82       	std	Z+1, r7	; 0x01
 454:	82 82       	std	Z+2, r8	; 0x02
 456:	93 82       	std	Z+3, r9	; 0x03
	digitsToBeep[1] = digit3;
 458:	a4 82       	std	Z+4, r10	; 0x04
 45a:	b5 82       	std	Z+5, r11	; 0x05
	digitsToBeep[2] = digit2;
 45c:	c6 82       	std	Z+6, r12	; 0x06
 45e:	d7 82       	std	Z+7, r13	; 0x07
	digitsToBeep[3] = digit1;
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
}
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	ff 90       	pop	r15
 46a:	ef 90       	pop	r14
 46c:	df 90       	pop	r13
 46e:	cf 90       	pop	r12
 470:	bf 90       	pop	r11
 472:	af 90       	pop	r10
 474:	9f 90       	pop	r9
 476:	8f 90       	pop	r8
 478:	7f 90       	pop	r7
 47a:	6f 90       	pop	r6
 47c:	08 95       	ret

0000047e <clear_segment_display>:
 47e:	cf 93       	push	r28
 480:	c1 e0       	ldi	r28, 0x01	; 1

void clear_segment_display() {
	// Clear 7 segment display (display all zero's)
	for (char i = 1; i <= 4; i++) {
 482:	04 c0       	rjmp	.+8      	; 0x48c <clear_segment_display+0xe>
		spi_write_word(i, 0);
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	8c 2f       	mov	r24, r28
 488:	60 de       	rcall	.-832    	; 0x14a <spi_write_word>
	digitsToBeep[3] = digit1;
}

void clear_segment_display() {
	// Clear 7 segment display (display all zero's)
	for (char i = 1; i <= 4; i++) {
 48a:	cf 5f       	subi	r28, 0xFF	; 255
 48c:	c5 30       	cpi	r28, 0x05	; 5
 48e:	d0 f3       	brcs	.-12     	; 0x484 <clear_segment_display+0x6>
		spi_write_word(i, 0);
	}
}
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <init_display_driver>:

/* Initialize the driver chip (type MAX 7219) */
void init_display_driver() {
	spi_write_word(0x09, 0xFF);
 494:	6f ef       	ldi	r22, 0xFF	; 255
 496:	89 e0       	ldi	r24, 0x09	; 9
 498:	58 de       	rcall	.-848    	; 0x14a <spi_write_word>
	spi_write_word(0x0A, 0x0F);
 49a:	6f e0       	ldi	r22, 0x0F	; 15
 49c:	8a e0       	ldi	r24, 0x0A	; 10
 49e:	55 de       	rcall	.-854    	; 0x14a <spi_write_word>
	spi_write_word(0x0B, 0x03);
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	8b e0       	ldi	r24, 0x0B	; 11
 4a4:	52 de       	rcall	.-860    	; 0x14a <spi_write_word>
	spi_write_word(0x0C, 0x01);
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	8c e0       	ldi	r24, 0x0C	; 12
 4aa:	4f de       	rcall	.-866    	; 0x14a <spi_write_word>
	
	clear_segment_display();
 4ac:	e8 cf       	rjmp	.-48     	; 0x47e <clear_segment_display>
 4ae:	08 95       	ret

000004b0 <init_buzzer>:
 4b0:	84 b3       	in	r24, 0x14	; 20
}

/* Initialization method for the built in buzzer */
void init_buzzer() {
	DDRC |= (1 << PC1);  // Set PC1 (RC1) as output
 4b2:	82 60       	ori	r24, 0x02	; 2
 4b4:	84 bb       	out	0x14, r24	; 20
 4b6:	08 95       	ret

000004b8 <DHT11_request>:
	The DHT11 responds by pulling the line LOW and then HIGH (which DHT11_response() detects).
If the response is valid, the microcontroller can proceed to read temperature and humidity data. */
/* Requests the data from the DHT11 sensor 
   This code was written with help from AI! */
void DHT11_request() {
	DHT11_DDR |= (1 << DHT11_PIN);  // Set DHT11 pin as output. This is necessary because the microcontroller must actively drive the data line LOW to send the start signal.
 4b8:	81 b3       	in	r24, 0x11	; 17
 4ba:	81 60       	ori	r24, 0x01	; 1
 4bc:	81 bb       	out	0x11, r24	; 17
	DHT11_PORT &= ~(1 << DHT11_PIN); // Pull low for 18ms. This (&=) operation clears the bit, setting the pin LOW.
 4be:	82 b3       	in	r24, 0x12	; 18
 4c0:	8e 7f       	andi	r24, 0xFE	; 254
 4c2:	82 bb       	out	0x12, r24	; 18
 4c4:	87 ec       	ldi	r24, 0xC7	; 199
 4c6:	9f ea       	ldi	r25, 0xAF	; 175
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <DHT11_request+0x10>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <DHT11_request+0x16>
 4ce:	00 00       	nop
	_delay_ms(18); // Long wait indicates start signal.
	DHT11_PORT |= (1 << DHT11_PIN);  // Pull high for 20-40us. This releases the bus, allowing the DHT11 to take control.
 4d0:	82 b3       	in	r24, 0x12	; 18
 4d2:	81 60       	ori	r24, 0x01	; 1
 4d4:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d6:	94 e6       	ldi	r25, 0x64	; 100
 4d8:	9a 95       	dec	r25
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <DHT11_request+0x20>
	_delay_us(30);
	DHT11_DDR &= ~(1 << DHT11_PIN); // Set pin as input
 4dc:	81 b3       	in	r24, 0x11	; 17
 4de:	8e 7f       	andi	r24, 0xFE	; 254
 4e0:	81 bb       	out	0x11, r24	; 17
 4e2:	08 95       	ret

000004e4 <DHT11_response>:
 4e4:	85 e8       	ldi	r24, 0x85	; 133
 4e6:	8a 95       	dec	r24
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <DHT11_response+0x2>
 4ea:	00 00       	nop
If successful, the microcontroller proceeds to read data bytes (like humidity and temperature).*/
/* Responds the data from the DHT11 sensor 
   This code was written with help from AI! */
uint8_t DHT11_response() {
	_delay_us(40); // Wait so that the request can be sent first.
	if (!(DHT11_PINC & (1 << DHT11_PIN))) { // Waits for pin LOW. Which confirms the sensor has responded.
 4ec:	80 99       	sbic	0x10, 0	; 16
 4ee:	13 c0       	rjmp	.+38     	; 0x516 <DHT11_response+0x32>
 4f0:	87 ec       	ldi	r24, 0xC7	; 199
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <DHT11_response+0x10>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <DHT11_response+0x16>
 4fa:	00 00       	nop
		_delay_us(80); // This aligns with the DHT11 protocol, where the sensor keeps the line LOW for 80 µs before pulling it HIGH.
		if (DHT11_PINC & (1 << DHT11_PIN)) { // Waits for pin HIGH. If the pin is HIGH, it confirms that the sensor has acknowledged the request and is ready to send data.
 4fc:	90 b3       	in	r25, 0x10	; 16
 4fe:	89 2f       	mov	r24, r25
 500:	81 70       	andi	r24, 0x01	; 1
 502:	90 ff       	sbrs	r25, 0
 504:	09 c0       	rjmp	.+18     	; 0x518 <DHT11_response+0x34>
 506:	87 ec       	ldi	r24, 0xC7	; 199
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <DHT11_response+0x26>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <DHT11_response+0x2c>
 510:	00 00       	nop
			_delay_us(80); // Ensures synchronization with the sensors response phase.
			return 1; // Successful response.
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	08 95       	ret
		}
	}
	return 0; // Unsuccessful response.
 516:	80 e0       	ldi	r24, 0x00	; 0
}
 518:	08 95       	ret

0000051a <DHT11_read_byte>:
	"1" bit: LOW ? HIGH (70 µs) ? LOW
The function uses the 30 µs delay to differentiate between 0 and 1. */
/* Reads a single byte (8 bits) from the DHT11 sensor 
   This code was written with help from AI! */
uint8_t DHT11_read_byte() {
	uint8_t i, result = 0;
 51a:	80 e0       	ldi	r24, 0x00	; 0
	for (i = 0; i < 8; i++) { // 8 bits per byte.
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	16 c0       	rjmp	.+44     	; 0x54c <DHT11_read_byte+0x32>
		while (!(DHT11_PINC & (1 << DHT11_PIN)));  // Waits for pin HIGH. Ensures synchronization with the sensor's data transmission.
 520:	80 9b       	sbis	0x10, 0	; 16
 522:	fe cf       	rjmp	.-4      	; 0x520 <DHT11_read_byte+0x6>
 524:	24 e6       	ldi	r18, 0x64	; 100
 526:	2a 95       	dec	r18
 528:	f1 f7       	brne	.-4      	; 0x526 <DHT11_read_byte+0xc>
		_delay_us(30); // Wait before checking the pin again.
		if (DHT11_PINC & (1 << DHT11_PIN))  // If pin is still HIGH, bit is 1. Otherwise it's 0. The most significant bit (MSB) is received first, so the bit is placed in position (7 - i).
 52a:	80 9b       	sbis	0x10, 0	; 16
 52c:	0c c0       	rjmp	.+24     	; 0x546 <DHT11_read_byte+0x2c>
		result |= (1 << (7 - i)); // Add byte to the result array.
 52e:	47 e0       	ldi	r20, 0x07	; 7
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	49 1b       	sub	r20, r25
 534:	51 09       	sbc	r21, r1
 536:	21 e0       	ldi	r18, 0x01	; 1
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DHT11_read_byte+0x26>
 53c:	22 0f       	add	r18, r18
 53e:	33 1f       	adc	r19, r19
 540:	4a 95       	dec	r20
 542:	e2 f7       	brpl	.-8      	; 0x53c <DHT11_read_byte+0x22>
 544:	82 2b       	or	r24, r18
		while (DHT11_PINC & (1 << DHT11_PIN)); // Waits for pin LOW. This marks the end of the bit transmission before moving to the next bit.
 546:	80 99       	sbic	0x10, 0	; 16
 548:	fe cf       	rjmp	.-4      	; 0x546 <DHT11_read_byte+0x2c>
The function uses the 30 µs delay to differentiate between 0 and 1. */
/* Reads a single byte (8 bits) from the DHT11 sensor 
   This code was written with help from AI! */
uint8_t DHT11_read_byte() {
	uint8_t i, result = 0;
	for (i = 0; i < 8; i++) { // 8 bits per byte.
 54a:	9f 5f       	subi	r25, 0xFF	; 255
 54c:	98 30       	cpi	r25, 0x08	; 8
 54e:	40 f3       	brcs	.-48     	; 0x520 <DHT11_read_byte+0x6>
		if (DHT11_PINC & (1 << DHT11_PIN))  // If pin is still HIGH, bit is 1. Otherwise it's 0. The most significant bit (MSB) is received first, so the bit is placed in position (7 - i).
		result |= (1 << (7 - i)); // Add byte to the result array.
		while (DHT11_PINC & (1 << DHT11_PIN)); // Waits for pin LOW. This marks the end of the bit transmission before moving to the next bit.
	}
	return result; // Returns array of bits.
}
 550:	08 95       	ret

00000552 <DHT11_get_data>:

/* Method that gets the data from the DHT11 sensor 
   This code was written with help from AI! */
uint8_t DHT11_get_data() {
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
	uint8_t humInt, humDec, tempInt, tempDec, checksum;
	
	DHT11_request(); // Initiate communication with the DHT11.
 55a:	ae df       	rcall	.-164    	; 0x4b8 <DHT11_request>
	if (DHT11_response()) { // Get either 1 or 0 based on if there is a response.
 55c:	c3 df       	rcall	.-122    	; 0x4e4 <DHT11_response>
 55e:	88 23       	and	r24, r24
 560:	c1 f0       	breq	.+48     	; 0x592 <DHT11_get_data+0x40>
		// Read bytes using custom digital one-wire protocol, which consists of 5 bytes.
		humInt = DHT11_read_byte();
 562:	db df       	rcall	.-74     	; 0x51a <DHT11_read_byte>
 564:	08 2f       	mov	r16, r24
		humDec = DHT11_read_byte();
 566:	d9 df       	rcall	.-78     	; 0x51a <DHT11_read_byte>
 568:	d8 2f       	mov	r29, r24
		tempInt = DHT11_read_byte();
 56a:	d7 df       	rcall	.-82     	; 0x51a <DHT11_read_byte>
 56c:	c8 2f       	mov	r28, r24
		tempDec = DHT11_read_byte();
 56e:	d5 df       	rcall	.-86     	; 0x51a <DHT11_read_byte>
 570:	18 2f       	mov	r17, r24
 572:	d3 df       	rcall	.-90     	; 0x51a <DHT11_read_byte>
		checksum = DHT11_read_byte();
 574:	2d 2f       	mov	r18, r29
 576:	30 e0       	ldi	r19, 0x00	; 0

		if ((humInt + humDec + tempInt + tempDec) == checksum) { // The checksum checks if the sent data is correct
 578:	20 0f       	add	r18, r16
 57a:	31 1d       	adc	r19, r1
 57c:	2c 0f       	add	r18, r28
 57e:	31 1d       	adc	r19, r1
 580:	21 0f       	add	r18, r17
 582:	31 1d       	adc	r19, r1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	28 17       	cp	r18, r24
 588:	39 07       	cpc	r19, r25
 58a:	11 f4       	brne	.+4      	; 0x590 <DHT11_get_data+0x3e>
 58c:	8c 2f       	mov	r24, r28
 58e:	01 c0       	rjmp	.+2      	; 0x592 <DHT11_get_data+0x40>
			// If the data is correct, return the temperature
			return tempInt; // temperature (°C) is tempInt, because tempDec is always 0 using a DHT11 sensor.
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	df 91       	pop	r29
		}
	}
	return 0; // If no data was read
 594:	cf 91       	pop	r28
}
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	08 95       	ret

0000059c <init_timer1>:
 59c:	8e b5       	in	r24, 0x2e	; 46
 59e:	88 60       	ori	r24, 0x08	; 8

/* Initializes Timer1 */
void init_timer1() {
	// Set timer in CTC mode (Clear Timer on Compare Match)
	TCCR1B |= (1 << WGM12);  // (CTC mode)
 5a0:	8e bd       	out	0x2e, r24	; 46
	
	// Prescaler on 1024
	TCCR1B |= (1 << CS12) | (1 << CS10);
 5a2:	8e b5       	in	r24, 0x2e	; 46
 5a4:	85 60       	ori	r24, 0x05	; 5
 5a6:	8e bd       	out	0x2e, r24	; 46
	
	// Value compare register (for 2 seconds)
	OCR1A = 19530;  // 2 seconds delay time for prescaler
 5a8:	8a e4       	ldi	r24, 0x4A	; 74
 5aa:	9c e4       	ldi	r25, 0x4C	; 76
 5ac:	9b bd       	out	0x2b, r25	; 43
 5ae:	8a bd       	out	0x2a, r24	; 42
	
	// Enable interrupts for Timer1
	TIMSK |= (1 << OCIE1A);  // Enable interrupt for compare match A
 5b0:	87 b7       	in	r24, 0x37	; 55
 5b2:	80 61       	ori	r24, 0x10	; 16
 5b4:	87 bf       	out	0x37, r24	; 55
 5b6:	08 95       	ret

000005b8 <__vector_12>:
}

/* Timer1 */
ISR(TIMER1_COMPA_vect) {
 5b8:	1f 92       	push	r1
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	0f 92       	push	r0
 5c0:	11 24       	eor	r1, r1
 5c2:	0b b6       	in	r0, 0x3b	; 59
 5c4:	0f 92       	push	r0
 5c6:	2f 93       	push	r18
 5c8:	3f 93       	push	r19
 5ca:	4f 93       	push	r20
 5cc:	5f 93       	push	r21
 5ce:	6f 93       	push	r22
 5d0:	7f 93       	push	r23
 5d2:	8f 93       	push	r24
 5d4:	9f 93       	push	r25
 5d6:	af 93       	push	r26
 5d8:	bf 93       	push	r27
 5da:	ef 93       	push	r30
 5dc:	ff 93       	push	r31
	// Get temperature
	latestTemperature = DHT11_get_data();
 5de:	b9 df       	rcall	.-142    	; 0x552 <DHT11_get_data>
 5e0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <latestTemperature>
	
	// Write to 7-segmented display
	calculate_digits(latestTemperature);
 5e4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <latestTemperature>
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	64 de       	rcall	.-824    	; 0x2b4 <calculate_digits>
}
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	bf 91       	pop	r27
 5f2:	af 91       	pop	r26
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	7f 91       	pop	r23
 5fa:	6f 91       	pop	r22
 5fc:	5f 91       	pop	r21
 5fe:	4f 91       	pop	r20
 600:	3f 91       	pop	r19
 602:	2f 91       	pop	r18
 604:	0f 90       	pop	r0
 606:	0b be       	out	0x3b, r0	; 59
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <main>:

/* Running method */
int main() {
	DDRB=0x01; // Set PB0 pin as output for display select
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	87 bb       	out	0x17, r24	; 23
	init_buzzer(); // Initialize buzzer
 616:	4c df       	rcall	.-360    	; 0x4b0 <init_buzzer>
	init_spi(); // Initialize spi module
 618:	72 dd       	rcall	.-1308   	; 0xfe <init_spi>
	init_display_driver(); // Initialize display chip
 61a:	3c df       	rcall	.-392    	; 0x494 <init_display_driver>
	init_timer1(); // Initialize Timer1
 61c:	bf df       	rcall	.-130    	; 0x59c <init_timer1>
 61e:	54 dd       	rcall	.-1368   	; 0xc8 <init_button>
	init_button(); // Initialize button for interrupts
 620:	78 94       	sei
	sei(); // Enable interrupts
 622:	c0 e0       	ldi	r28, 0x00	; 0
	
	uint8_t buttonPressedLast = 0; // Prevent button from being spammed
 624:	01 c0       	rjmp	.+2      	; 0x628 <main+0x16>
 626:	c0 e0       	ldi	r28, 0x00	; 0
				}
				buttonPressedLast = 1;
				_delay_ms(200); // Debounce delay
			}
		} else {
			buttonPressedLast = 0;
 628:	56 dd       	rcall	.-1364   	; 0xd6 <is_button_pressed>
	init_button(); // Initialize button for interrupts
	sei(); // Enable interrupts
	
	uint8_t buttonPressedLast = 0; // Prevent button from being spammed
	while (1) {
		if (is_button_pressed()) {
 62a:	89 2b       	or	r24, r25
 62c:	e1 f3       	breq	.-8      	; 0x626 <main+0x14>
 62e:	cc 23       	and	r28, r28
 630:	89 f0       	breq	.+34     	; 0x654 <main+0x42>
			if (!buttonPressedLast) {
 632:	fa cf       	rjmp	.-12     	; 0x628 <main+0x16>
 634:	ce 01       	movw	r24, r28
 636:	88 0f       	add	r24, r24
				// Play beep for all of the digits of the temperature
				for (int i = 0; i < sizeof(digitsToBeep)/sizeof(digitsToBeep[0]); i++) {
					beep_for_digit(digitsToBeep[i], frequenciesToPlay[i]);
 638:	99 1f       	adc	r25, r25
 63a:	fc 01       	movw	r30, r24
 63c:	e0 50       	subi	r30, 0x00	; 0
 63e:	ff 4f       	sbci	r31, 0xFF	; 255
 640:	60 81       	ld	r22, Z
 642:	71 81       	ldd	r23, Z+1	; 0x01
 644:	fc 01       	movw	r30, r24
 646:	e5 5f       	subi	r30, 0xF5	; 245
 648:	fe 4f       	sbci	r31, 0xFE	; 254
 64a:	80 81       	ld	r24, Z
 64c:	91 81       	ldd	r25, Z+1	; 0x01
 64e:	e7 dd       	rcall	.-1074   	; 0x21e <beep_for_digit>
 650:	21 96       	adiw	r28, 0x01	; 1
 652:	02 c0       	rjmp	.+4      	; 0x658 <main+0x46>
	uint8_t buttonPressedLast = 0; // Prevent button from being spammed
	while (1) {
		if (is_button_pressed()) {
			if (!buttonPressedLast) {
				// Play beep for all of the digits of the temperature
				for (int i = 0; i < sizeof(digitsToBeep)/sizeof(digitsToBeep[0]); i++) {
 654:	c0 e0       	ldi	r28, 0x00	; 0
 656:	d0 e0       	ldi	r29, 0x00	; 0
 658:	c4 30       	cpi	r28, 0x04	; 4
 65a:	d1 05       	cpc	r29, r1
 65c:	58 f3       	brcs	.-42     	; 0x634 <main+0x22>
 65e:	2f e7       	ldi	r18, 0x7F	; 127
 660:	8a e1       	ldi	r24, 0x1A	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 662:	96 e0       	ldi	r25, 0x06	; 6
 664:	21 50       	subi	r18, 0x01	; 1
 666:	80 40       	sbci	r24, 0x00	; 0
 668:	90 40       	sbci	r25, 0x00	; 0
 66a:	e1 f7       	brne	.-8      	; 0x664 <main+0x52>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <main+0x5c>
 66e:	00 00       	nop
 670:	c1 e0       	ldi	r28, 0x01	; 1
 672:	da cf       	rjmp	.-76     	; 0x628 <main+0x16>

00000674 <__divmodhi4>:
					beep_for_digit(digitsToBeep[i], frequenciesToPlay[i]);
				}
				buttonPressedLast = 1;
 674:	97 fb       	bst	r25, 7
 676:	07 2e       	mov	r0, r23
 678:	16 f4       	brtc	.+4      	; 0x67e <__divmodhi4+0xa>
 67a:	00 94       	com	r0
 67c:	06 d0       	rcall	.+12     	; 0x68a <__divmodhi4_neg1>
 67e:	77 fd       	sbrc	r23, 7
 680:	08 d0       	rcall	.+16     	; 0x692 <__divmodhi4_neg2>
 682:	3c d0       	rcall	.+120    	; 0x6fc <__udivmodhi4>
 684:	07 fc       	sbrc	r0, 7
 686:	05 d0       	rcall	.+10     	; 0x692 <__divmodhi4_neg2>
 688:	3e f4       	brtc	.+14     	; 0x698 <__divmodhi4_exit>

0000068a <__divmodhi4_neg1>:
 68a:	90 95       	com	r25
 68c:	81 95       	neg	r24
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	08 95       	ret

00000692 <__divmodhi4_neg2>:
 692:	70 95       	com	r23
 694:	61 95       	neg	r22
 696:	7f 4f       	sbci	r23, 0xFF	; 255

00000698 <__divmodhi4_exit>:
 698:	08 95       	ret

0000069a <__udivmodsi4>:
 69a:	a1 e2       	ldi	r26, 0x21	; 33
 69c:	1a 2e       	mov	r1, r26
 69e:	aa 1b       	sub	r26, r26
 6a0:	bb 1b       	sub	r27, r27
 6a2:	fd 01       	movw	r30, r26
 6a4:	0d c0       	rjmp	.+26     	; 0x6c0 <__udivmodsi4_ep>

000006a6 <__udivmodsi4_loop>:
 6a6:	aa 1f       	adc	r26, r26
 6a8:	bb 1f       	adc	r27, r27
 6aa:	ee 1f       	adc	r30, r30
 6ac:	ff 1f       	adc	r31, r31
 6ae:	a2 17       	cp	r26, r18
 6b0:	b3 07       	cpc	r27, r19
 6b2:	e4 07       	cpc	r30, r20
 6b4:	f5 07       	cpc	r31, r21
 6b6:	20 f0       	brcs	.+8      	; 0x6c0 <__udivmodsi4_ep>
 6b8:	a2 1b       	sub	r26, r18
 6ba:	b3 0b       	sbc	r27, r19
 6bc:	e4 0b       	sbc	r30, r20
 6be:	f5 0b       	sbc	r31, r21

000006c0 <__udivmodsi4_ep>:
 6c0:	66 1f       	adc	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	1a 94       	dec	r1
 6ca:	69 f7       	brne	.-38     	; 0x6a6 <__udivmodsi4_loop>
 6cc:	60 95       	com	r22
 6ce:	70 95       	com	r23
 6d0:	80 95       	com	r24
 6d2:	90 95       	com	r25
 6d4:	9b 01       	movw	r18, r22
 6d6:	ac 01       	movw	r20, r24
 6d8:	bd 01       	movw	r22, r26
 6da:	cf 01       	movw	r24, r30
 6dc:	08 95       	ret

000006de <__umulhisi3>:
 6de:	a2 9f       	mul	r26, r18
 6e0:	b0 01       	movw	r22, r0
 6e2:	b3 9f       	mul	r27, r19
 6e4:	c0 01       	movw	r24, r0
 6e6:	a3 9f       	mul	r26, r19
 6e8:	70 0d       	add	r23, r0
 6ea:	81 1d       	adc	r24, r1
 6ec:	11 24       	eor	r1, r1
 6ee:	91 1d       	adc	r25, r1
 6f0:	b2 9f       	mul	r27, r18
 6f2:	70 0d       	add	r23, r0
 6f4:	81 1d       	adc	r24, r1
 6f6:	11 24       	eor	r1, r1
 6f8:	91 1d       	adc	r25, r1
 6fa:	08 95       	ret

000006fc <__udivmodhi4>:
 6fc:	aa 1b       	sub	r26, r26
 6fe:	bb 1b       	sub	r27, r27
 700:	51 e1       	ldi	r21, 0x11	; 17
 702:	07 c0       	rjmp	.+14     	; 0x712 <__udivmodhi4_ep>

00000704 <__udivmodhi4_loop>:
 704:	aa 1f       	adc	r26, r26
 706:	bb 1f       	adc	r27, r27
 708:	a6 17       	cp	r26, r22
 70a:	b7 07       	cpc	r27, r23
 70c:	10 f0       	brcs	.+4      	; 0x712 <__udivmodhi4_ep>
 70e:	a6 1b       	sub	r26, r22
 710:	b7 0b       	sbc	r27, r23

00000712 <__udivmodhi4_ep>:
 712:	88 1f       	adc	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	5a 95       	dec	r21
 718:	a9 f7       	brne	.-22     	; 0x704 <__udivmodhi4_loop>
 71a:	80 95       	com	r24
 71c:	90 95       	com	r25
 71e:	bc 01       	movw	r22, r24
 720:	cd 01       	movw	r24, r26
 722:	08 95       	ret

00000724 <_exit>:
 724:	f8 94       	cli

00000726 <__stop_program>:
 726:	ff cf       	rjmp	.-2      	; 0x726 <__stop_program>
