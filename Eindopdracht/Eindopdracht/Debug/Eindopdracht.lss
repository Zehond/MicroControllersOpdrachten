
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000f34  00000fc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800126  00800126  00000fee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000104c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b8f  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f2b  00000000  00000000  00002dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f7c  00000000  00000000  00003cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  00004c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078b  00000000  00000000  00005138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001120  00000000  00000000  000058c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000069e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	93 c3       	rjmp	.+1830   	; 0x72c <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	be c2       	rjmp	.+1404   	; 0x5ae <__vector_12>
  32:	00 00       	nop
  34:	35 c3       	rjmp	.+1642   	; 0x6a0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 34       	cpi	r26, 0x44	; 68
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9c d3       	rcall	.+1848   	; 0x7fc <main>
  c4:	35 c7       	rjmp	.+3690   	; 0xf30 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_button>:
#include "Button.h"

/* Initializes button for interrupts
   Pressed == HIGH, otherwise LOW */
void init_button() {
	BUTTON_DDR &= ~(1 << BUTTON_PIN);  // Set button pin as input
  c8:	82 b1       	in	r24, 0x02	; 2
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	82 b9       	out	0x02, r24	; 2
	BUTTON_PORT |= (1 << BUTTON_PIN);  // Set internal pull-up resistance
  ce:	83 b1       	in	r24, 0x03	; 3
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	83 b9       	out	0x03, r24	; 3
	
	EICRA |= (1 << ISC01);  // ISC01 = 1 (rising edge trigger)
  d4:	ea e6       	ldi	r30, 0x6A	; 106
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
	EICRA |= (1 << ISC00);  // ISC00 = 1 (rising edge trigger)
  de:	80 81       	ld	r24, Z
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	80 83       	st	Z, r24

	// Enable external interrupt INT0
	EIMSK |= (1 << INT0);  // Enable INT0 interrupt
  e4:	89 b7       	in	r24, 0x39	; 57
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	89 bf       	out	0x39, r24	; 57
  ea:	08 95       	ret

000000ec <is_button_pressed>:
}

/* Button pressed event */
int is_button_pressed() {
	return (BUTTON_PINE & (1 << BUTTON_PIN));  // Return 1 if button is pressed (HIGH)
  ec:	81 b1       	in	r24, 0x01	; 1
  ee:	81 70       	andi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	08 95       	ret

000000f4 <delay_us_variable>:

#include "Buzzer.h"

/* Busy waiting for 'us' microseconds */
void delay_us_variable(int us) {
	for (int i = 0; i < us; i++) {
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	06 c0       	rjmp	.+12     	; 0x106 <delay_us_variable+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	43 e0       	ldi	r20, 0x03	; 3
  fc:	4a 95       	dec	r20
  fe:	f1 f7       	brne	.-4      	; 0xfc <delay_us_variable+0x8>
 100:	00 00       	nop
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	28 17       	cp	r18, r24
 108:	39 07       	cpc	r19, r25
 10a:	bc f3       	brlt	.-18     	; 0xfa <delay_us_variable+0x6>
		_delay_us(1); // 1 µs fixed delay
	}
}
 10c:	08 95       	ret

0000010e <init_buzzer>:

/* Initialization method for the built in buzzer */
void init_buzzer() {
	DDRC |= (1 << PE1);  // Set PE1 (RC1) as output
 10e:	84 b3       	in	r24, 0x14	; 20
 110:	82 60       	ori	r24, 0x02	; 2
 112:	84 bb       	out	0x14, r24	; 20
 114:	08 95       	ret

00000116 <play_beep_sound>:
}

/* Custom method to create 'BEEP' sound
   This code was written with help from AI! */
void play_beep_sound(uint16_t frequency, uint16_t durationMs) {
 116:	8f 92       	push	r8
 118:	9f 92       	push	r9
 11a:	af 92       	push	r10
 11c:	bf 92       	push	r11
 11e:	cf 92       	push	r12
 120:	df 92       	push	r13
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	5b 01       	movw	r10, r22
	uint32_t delayTime = (500000UL / frequency); // Half-period (half of total time) in µs
 12c:	9c 01       	movw	r18, r24
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	60 e2       	ldi	r22, 0x20	; 32
 134:	71 ea       	ldi	r23, 0xA1	; 161
 136:	87 e0       	ldi	r24, 0x07	; 7
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	da d3       	rcall	.+1972   	; 0x8f0 <__udivmodsi4>
 13c:	69 01       	movw	r12, r18
 13e:	7a 01       	movw	r14, r20
 140:	d2 2f       	mov	r29, r18
 142:	cd 2d       	mov	r28, r13
	uint32_t numCycles = ((uint32_t)durationMs * 1000) / (delayTime * 2UL); // Amount of cycles ON/OFF
 144:	95 01       	movw	r18, r10
 146:	a8 ee       	ldi	r26, 0xE8	; 232
 148:	b3 e0       	ldi	r27, 0x03	; 3
 14a:	f4 d3       	rcall	.+2024   	; 0x934 <__umulhisi3>
 14c:	a7 01       	movw	r20, r14
 14e:	96 01       	movw	r18, r12
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	44 1f       	adc	r20, r20
 156:	55 1f       	adc	r21, r21
 158:	cb d3       	rcall	.+1942   	; 0x8f0 <__udivmodsi4>
 15a:	69 01       	movw	r12, r18
 15c:	7a 01       	movw	r14, r20
	
	for (uint32_t i = 0; i < numCycles; i++) {
 15e:	81 2c       	mov	r8, r1
 160:	91 2c       	mov	r9, r1
 162:	54 01       	movw	r10, r8
 164:	11 c0       	rjmp	.+34     	; 0x188 <play_beep_sound+0x72>
		PORTE |= (1 << PE1);  // Turn buzzer ON
 166:	83 b1       	in	r24, 0x03	; 3
 168:	82 60       	ori	r24, 0x02	; 2
		delay_us_variable(delayTime);
 16a:	83 b9       	out	0x03, r24	; 3
 16c:	8d 2f       	mov	r24, r29
 16e:	9c 2f       	mov	r25, r28
 170:	c1 df       	rcall	.-126    	; 0xf4 <delay_us_variable>
		PORTE &= ~(1 << PE1);  // Turn buzzer OFF
 172:	83 b1       	in	r24, 0x03	; 3
 174:	8d 7f       	andi	r24, 0xFD	; 253
		delay_us_variable(delayTime);
 176:	83 b9       	out	0x03, r24	; 3
 178:	8d 2f       	mov	r24, r29
 17a:	9c 2f       	mov	r25, r28
 17c:	bb df       	rcall	.-138    	; 0xf4 <delay_us_variable>
   This code was written with help from AI! */
void play_beep_sound(uint16_t frequency, uint16_t durationMs) {
	uint32_t delayTime = (500000UL / frequency); // Half-period (half of total time) in µs
	uint32_t numCycles = ((uint32_t)durationMs * 1000) / (delayTime * 2UL); // Amount of cycles ON/OFF
	
	for (uint32_t i = 0; i < numCycles; i++) {
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	88 1a       	sub	r8, r24
 182:	98 0a       	sbc	r9, r24
 184:	a8 0a       	sbc	r10, r24
 186:	b8 0a       	sbc	r11, r24
 188:	8c 14       	cp	r8, r12
 18a:	9d 04       	cpc	r9, r13
 18c:	ae 04       	cpc	r10, r14
 18e:	bf 04       	cpc	r11, r15
 190:	50 f3       	brcs	.-44     	; 0x166 <play_beep_sound+0x50>
		PORTE |= (1 << PE1);  // Turn buzzer ON
		delay_us_variable(delayTime);
		PORTE &= ~(1 << PE1);  // Turn buzzer OFF
		delay_us_variable(delayTime);
	}
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	df 90       	pop	r13
 19c:	cf 90       	pop	r12
 19e:	bf 90       	pop	r11
 1a0:	af 90       	pop	r10
 1a2:	9f 90       	pop	r9
 1a4:	8f 90       	pop	r8
 1a6:	08 95       	ret

000001a8 <beep_for_digit>:

/* Beeps for a digit with a certain amount and frequency */
void beep_for_digit(int digit, int frequency) {
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	if (digit == 0) return;
 1b8:	00 97       	sbiw	r24, 0x00	; 0
 1ba:	11 f1       	breq	.+68     	; 0x200 <beep_for_digit+0x58>
 1bc:	8b 01       	movw	r16, r22
 1be:	ec 01       	movw	r28, r24
 1c0:	c1 2c       	mov	r12, r1
 1c2:	d1 2c       	mov	r13, r1
 1c4:	76 01       	movw	r14, r12
 1c6:	12 c0       	rjmp	.+36     	; 0x1ec <beep_for_digit+0x44>
	
	for (uint32_t i = 0; i < digit; i++) {
		play_beep_sound(frequency, 100);  // Beep at set frequency for 100 milliseconds
 1c8:	64 e6       	ldi	r22, 0x64	; 100
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	c8 01       	movw	r24, r16
 1ce:	a3 df       	rcall	.-186    	; 0x116 <play_beep_sound>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	2f e3       	ldi	r18, 0x3F	; 63
 1d2:	8d e0       	ldi	r24, 0x0D	; 13
 1d4:	93 e0       	ldi	r25, 0x03	; 3
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <beep_for_digit+0x2e>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <beep_for_digit+0x38>
 1e0:	00 00       	nop

/* Beeps for a digit with a certain amount and frequency */
void beep_for_digit(int digit, int frequency) {
	if (digit == 0) return;
	
	for (uint32_t i = 0; i < digit; i++) {
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	c2 1a       	sub	r12, r18
 1e6:	d2 0a       	sbc	r13, r18
 1e8:	e2 0a       	sbc	r14, r18
 1ea:	f2 0a       	sbc	r15, r18
 1ec:	ce 01       	movw	r24, r28
 1ee:	0d 2e       	mov	r0, r29
 1f0:	00 0c       	add	r0, r0
 1f2:	aa 0b       	sbc	r26, r26
 1f4:	bb 0b       	sbc	r27, r27
 1f6:	c8 16       	cp	r12, r24
 1f8:	d9 06       	cpc	r13, r25
 1fa:	ea 06       	cpc	r14, r26
 1fc:	fb 06       	cpc	r15, r27
 1fe:	20 f3       	brcs	.-56     	; 0x1c8 <beep_for_digit+0x20>
		play_beep_sound(frequency, 100);  // Beep at set frequency for 100 milliseconds
		_delay_ms(100); // Wait 100 milliseconds before next beep
	}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	ff 90       	pop	r15
 20a:	ef 90       	pop	r14
 20c:	df 90       	pop	r13
 20e:	cf 90       	pop	r12
 210:	08 95       	ret

00000212 <DHT11_request>:
	The DHT11 responds by pulling the line LOW and then HIGH (which DHT11_response() detects).
If the response is valid, the microcontroller can proceed to read temperature and humidity data. */
/* Requests the data from the DHT11 sensor 
   This code was written with help from AI! */
void DHT11_request() {
	DHT11_DDR |= (1 << DHT11_PIN);  // Set DHT11 pin as output. This is necessary because the microcontroller must actively drive the data line LOW to send the start signal.
 212:	81 b3       	in	r24, 0x11	; 17
 214:	81 60       	ori	r24, 0x01	; 1
 216:	81 bb       	out	0x11, r24	; 17
	DHT11_PORT &= ~(1 << DHT11_PIN); // Pull low for 18ms. This (&=) operation clears the bit, setting the pin LOW.
 218:	82 b3       	in	r24, 0x12	; 18
 21a:	8e 7f       	andi	r24, 0xFE	; 254
 21c:	82 bb       	out	0x12, r24	; 18
 21e:	87 ec       	ldi	r24, 0xC7	; 199
 220:	9f ea       	ldi	r25, 0xAF	; 175
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <DHT11_request+0x10>
 226:	00 c0       	rjmp	.+0      	; 0x228 <DHT11_request+0x16>
 228:	00 00       	nop
	_delay_ms(18); // Long wait indicates start signal.
	DHT11_PORT |= (1 << DHT11_PIN);  // Pull high for 20-40us. This releases the bus, allowing the DHT11 to take control.
 22a:	82 b3       	in	r24, 0x12	; 18
 22c:	81 60       	ori	r24, 0x01	; 1
 22e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	94 e6       	ldi	r25, 0x64	; 100
 232:	9a 95       	dec	r25
 234:	f1 f7       	brne	.-4      	; 0x232 <DHT11_request+0x20>
	_delay_us(30);
	DHT11_DDR &= ~(1 << DHT11_PIN); // Set pin as input
 236:	81 b3       	in	r24, 0x11	; 17
 238:	8e 7f       	andi	r24, 0xFE	; 254
 23a:	81 bb       	out	0x11, r24	; 17
 23c:	08 95       	ret

0000023e <DHT11_response>:
 23e:	85 e8       	ldi	r24, 0x85	; 133
 240:	8a 95       	dec	r24
 242:	f1 f7       	brne	.-4      	; 0x240 <DHT11_response+0x2>
 244:	00 00       	nop
If successful, the microcontroller proceeds to read data bytes (like humidity and temperature).*/
/* Responds the data from the DHT11 sensor 
   This code was written with help from AI! */
uint8_t DHT11_response() {
	_delay_us(40); // Wait so that the request can be sent first.
	if (!(DHT11_PIND & (1 << DHT11_PIN))) { // Waits for pin LOW. Which confirms the sensor has responded.
 246:	80 99       	sbic	0x10, 0	; 16
 248:	13 c0       	rjmp	.+38     	; 0x270 <DHT11_response+0x32>
 24a:	87 ec       	ldi	r24, 0xC7	; 199
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <DHT11_response+0x10>
 252:	00 c0       	rjmp	.+0      	; 0x254 <DHT11_response+0x16>
 254:	00 00       	nop
		_delay_us(80); // This aligns with the DHT11 protocol, where the sensor keeps the line LOW for 80 µs before pulling it HIGH.
		if (DHT11_PIND & (1 << DHT11_PIN)) { // Waits for pin HIGH. If the pin is HIGH, it confirms that the sensor has acknowledged the request and is ready to send data.
 256:	90 b3       	in	r25, 0x10	; 16
 258:	89 2f       	mov	r24, r25
 25a:	81 70       	andi	r24, 0x01	; 1
 25c:	90 ff       	sbrs	r25, 0
 25e:	09 c0       	rjmp	.+18     	; 0x272 <DHT11_response+0x34>
 260:	87 ec       	ldi	r24, 0xC7	; 199
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <DHT11_response+0x26>
 268:	00 c0       	rjmp	.+0      	; 0x26a <DHT11_response+0x2c>
 26a:	00 00       	nop
			_delay_us(80); // Ensures synchronization with the sensors response phase.
			return 1; // Successful response.
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	08 95       	ret
		}
	}
	return 0; // Unsuccessful response.
 270:	80 e0       	ldi	r24, 0x00	; 0
}
 272:	08 95       	ret

00000274 <DHT11_read_byte>:
	"1" bit: LOW ? HIGH (70 µs) ? LOW
The function uses the 30 µs delay to differentiate between 0 and 1. */
/* Reads a single byte (8 bits) from the DHT11 sensor 
   This code was written with help from AI! */
uint8_t DHT11_read_byte() {
	uint8_t i, result = 0;
 274:	80 e0       	ldi	r24, 0x00	; 0
	for (i = 0; i < 8; i++) { // 8 bits per byte.
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	16 c0       	rjmp	.+44     	; 0x2a6 <DHT11_read_byte+0x32>
		while (!(DHT11_PIND & (1 << DHT11_PIN)));  // Waits for pin HIGH. Ensures synchronization with the sensor's data transmission.
 27a:	80 9b       	sbis	0x10, 0	; 16
 27c:	fe cf       	rjmp	.-4      	; 0x27a <DHT11_read_byte+0x6>
 27e:	24 e6       	ldi	r18, 0x64	; 100
 280:	2a 95       	dec	r18
 282:	f1 f7       	brne	.-4      	; 0x280 <DHT11_read_byte+0xc>
		_delay_us(30); // Wait before checking the pin again.
		if (DHT11_PIND & (1 << DHT11_PIN))  // If pin is still HIGH, bit is 1. Otherwise it's 0. The most significant bit (MSB) is received first, so the bit is placed in position (7 - i).
 284:	80 9b       	sbis	0x10, 0	; 16
 286:	0c c0       	rjmp	.+24     	; 0x2a0 <DHT11_read_byte+0x2c>
		result |= (1 << (7 - i)); // Add byte to the result array.
 288:	47 e0       	ldi	r20, 0x07	; 7
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	49 1b       	sub	r20, r25
 28e:	51 09       	sbc	r21, r1
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DHT11_read_byte+0x26>
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	4a 95       	dec	r20
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DHT11_read_byte+0x22>
 29e:	82 2b       	or	r24, r18
		while (DHT11_PIND & (1 << DHT11_PIN)); // Waits for pin LOW. This marks the end of the bit transmission before moving to the next bit.
 2a0:	80 99       	sbic	0x10, 0	; 16
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <DHT11_read_byte+0x2c>
The function uses the 30 µs delay to differentiate between 0 and 1. */
/* Reads a single byte (8 bits) from the DHT11 sensor 
   This code was written with help from AI! */
uint8_t DHT11_read_byte() {
	uint8_t i, result = 0;
	for (i = 0; i < 8; i++) { // 8 bits per byte.
 2a4:	9f 5f       	subi	r25, 0xFF	; 255
 2a6:	98 30       	cpi	r25, 0x08	; 8
 2a8:	40 f3       	brcs	.-48     	; 0x27a <DHT11_read_byte+0x6>
		if (DHT11_PIND & (1 << DHT11_PIN))  // If pin is still HIGH, bit is 1. Otherwise it's 0. The most significant bit (MSB) is received first, so the bit is placed in position (7 - i).
		result |= (1 << (7 - i)); // Add byte to the result array.
		while (DHT11_PIND & (1 << DHT11_PIN)); // Waits for pin LOW. This marks the end of the bit transmission before moving to the next bit.
	}
	return result; // Returns array of bits.
}
 2aa:	08 95       	ret

000002ac <DHT11_get_data>:

/* Method that gets the data from the DHT11 sensor 
   This code was written with help from AI! */
DHT11_Data DHT11_get_data() {
 2ac:	ef 92       	push	r14
 2ae:	ff 92       	push	r15
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
	uint8_t humInt, humDec, tempInt, tempDec, checksum;
	DHT11_Data newData = { 0, 0 };
 2b8:	10 e0       	ldi	r17, 0x00	; 0
 2ba:	d0 e0       	ldi	r29, 0x00	; 0
	
	DHT11_request(); // Initiate communication with the DHT11.
 2bc:	aa df       	rcall	.-172    	; 0x212 <DHT11_request>
	if (DHT11_response()) { // Get either 1 or 0 based on if there is a response.
 2be:	bf df       	rcall	.-130    	; 0x23e <DHT11_response>
 2c0:	88 23       	and	r24, r24
 2c2:	b9 f0       	breq	.+46     	; 0x2f2 <DHT11_get_data+0x46>
		// Read bytes using custom digital one-wire protocol, which consists of 5 bytes.
		humInt = DHT11_read_byte();
 2c4:	d7 df       	rcall	.-82     	; 0x274 <DHT11_read_byte>
 2c6:	08 2f       	mov	r16, r24
		humDec = DHT11_read_byte();
 2c8:	d5 df       	rcall	.-86     	; 0x274 <DHT11_read_byte>
 2ca:	c8 2f       	mov	r28, r24
		tempInt = DHT11_read_byte();
 2cc:	d3 df       	rcall	.-90     	; 0x274 <DHT11_read_byte>
 2ce:	f8 2e       	mov	r15, r24
		tempDec = DHT11_read_byte();
 2d0:	d1 df       	rcall	.-94     	; 0x274 <DHT11_read_byte>
 2d2:	e8 2e       	mov	r14, r24
 2d4:	cf df       	rcall	.-98     	; 0x274 <DHT11_read_byte>
		checksum = DHT11_read_byte();
 2d6:	2c 2f       	mov	r18, r28
 2d8:	30 e0       	ldi	r19, 0x00	; 0

		if ((humInt + humDec + tempInt + tempDec) == checksum) { // The checksum checks if the sent data is correct
 2da:	20 0f       	add	r18, r16
 2dc:	31 1d       	adc	r19, r1
 2de:	2f 0d       	add	r18, r15
 2e0:	31 1d       	adc	r19, r1
 2e2:	2e 0d       	add	r18, r14
 2e4:	31 1d       	adc	r19, r1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	28 17       	cp	r18, r24
 2ea:	39 07       	cpc	r19, r25
 2ec:	11 f4       	brne	.+4      	; 0x2f2 <DHT11_get_data+0x46>
 2ee:	1f 2d       	mov	r17, r15
 2f0:	d0 2f       	mov	r29, r16
			// If the data is correct, return the temperature
			newData.temperature = tempInt; // temperature (°C) is tempInt, because tempDec is always 0 using a DHT11 sensor.
 2f2:	81 2f       	mov	r24, r17
			newData.humidity = humInt; // Hum is humInt, because humDec is always 0 using a DHT11 sensor.
 2f4:	9d 2f       	mov	r25, r29
		}
	}
	return newData;
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	08 95       	ret

00000304 <lcd_strobe_lcd_e>:

#include "Lcd.h"

/* Helper method */
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 304:	8b b3       	in	r24, 0x1b	; 27
 306:	80 64       	ori	r24, 0x40	; 64
 308:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30a:	8f ec       	ldi	r24, 0xCF	; 207
 30c:	97 e0       	ldi	r25, 0x07	; 7
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <lcd_strobe_lcd_e+0xa>
 312:	00 c0       	rjmp	.+0      	; 0x314 <lcd_strobe_lcd_e+0x10>
 314:	00 00       	nop
	_delay_ms(1);			// Time needed to register
	PORTA &= ~(1<<LCD_E);  	// E low
 316:	8b b3       	in	r24, 0x1b	; 27
 318:	8f 7b       	andi	r24, 0xBF	; 191
 31a:	8b bb       	out	0x1b, r24	; 27
 31c:	8f ec       	ldi	r24, 0xCF	; 207
 31e:	97 e0       	ldi	r25, 0x07	; 7
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <lcd_strobe_lcd_e+0x1c>
 324:	00 c0       	rjmp	.+0      	; 0x326 <lcd_strobe_lcd_e+0x22>
 326:	00 00       	nop
 328:	08 95       	ret

0000032a <init_lcd>:
	_delay_ms(1);			// Time needed to register
}

/* Init LCD-screen registers */
void init_lcd() {
 32a:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRD = 0xFF;
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 330:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 332:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 334:	1b ba       	out	0x1b, r1	; 27

	// Step 2 (table 12)
	PORTC = 0x20;	// Set first row
 336:	c0 e2       	ldi	r28, 0x20	; 32
 338:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 33a:	e4 df       	rcall	.-56     	; 0x304 <lcd_strobe_lcd_e>
	PORTC = 0x20;	// Set second row
	lcd_strobe_lcd_e();
 33c:	c5 bb       	out	0x15, r28	; 21

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 33e:	e2 df       	rcall	.-60     	; 0x304 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 340:	c5 bb       	out	0x15, r28	; 21
	PORTC = 0x80;
 342:	e0 df       	rcall	.-64     	; 0x304 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 344:	80 e8       	ldi	r24, 0x80	; 128
 346:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
	lcd_strobe_lcd_e();
 348:	dd df       	rcall	.-70     	; 0x304 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 34a:	15 ba       	out	0x15, r1	; 21
 34c:	db df       	rcall	.-74     	; 0x304 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 34e:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 350:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 352:	d8 df       	rcall	.-80     	; 0x304 <lcd_strobe_lcd_e>
 354:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 356:	d6 df       	rcall	.-84     	; 0x304 <lcd_strobe_lcd_e>
 358:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e();
 35a:	85 bb       	out	0x15, r24	; 21
 35c:	d3 df       	rcall	.-90     	; 0x304 <lcd_strobe_lcd_e>
}
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <lcd_write_data>:

/* Writes data to the LCD-screen */
void lcd_write_data(unsigned char byte) {
 362:	cf 93       	push	r28
 364:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte; // Save data
 366:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS); // Code 1 = sending text
 368:	8b b3       	in	r24, 0x1b	; 27
 36a:	80 61       	ori	r24, 0x10	; 16
 36c:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e(); // Send data
 36e:	ca df       	rcall	.-108    	; 0x304 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 370:	c2 95       	swap	r28
 372:	c0 7f       	andi	r28, 0xF0	; 240
 374:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 376:	8b b3       	in	r24, 0x1b	; 27
 378:	80 61       	ori	r24, 0x10	; 16
	lcd_strobe_lcd_e();
 37a:	8b bb       	out	0x1b, r24	; 27
 37c:	c3 df       	rcall	.-122    	; 0x304 <lcd_strobe_lcd_e>
}
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <display_text>:

/* Display text on the LCD-screen */
void display_text(char *str) {
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	ec 01       	movw	r28, r24
	for(;*str; str++){ // Write each character in the string individually
 388:	02 c0       	rjmp	.+4      	; 0x38e <display_text+0xc>
		lcd_write_data(*str);
 38a:	eb df       	rcall	.-42     	; 0x362 <lcd_write_data>
	lcd_strobe_lcd_e();
}

/* Display text on the LCD-screen */
void display_text(char *str) {
	for(;*str; str++){ // Write each character in the string individually
 38c:	21 96       	adiw	r28, 0x01	; 1
 38e:	88 81       	ld	r24, Y
 390:	81 11       	cpse	r24, r1
 392:	fb cf       	rjmp	.-10     	; 0x38a <display_text+0x8>
		lcd_write_data(*str);
	}
}
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <lcd_write_command>:

/* Writes a command to the LCD-screen */
void lcd_write_command(unsigned char byte) {
 39a:	cf 93       	push	r28
 39c:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte; // Save data
 39e:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS); // Code 0 = sending command
 3a0:	8b b3       	in	r24, 0x1b	; 27
 3a2:	8f 7e       	andi	r24, 0xEF	; 239
 3a4:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e(); // Send data
 3a6:	ae df       	rcall	.-164    	; 0x304 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 3a8:	c2 95       	swap	r28
 3aa:	c0 7f       	andi	r28, 0xF0	; 240
 3ac:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 3ae:	8b b3       	in	r24, 0x1b	; 27
 3b0:	8f 7e       	andi	r24, 0xEF	; 239
	lcd_strobe_lcd_e();
 3b2:	8b bb       	out	0x1b, r24	; 27
 3b4:	a7 df       	rcall	.-178    	; 0x304 <lcd_strobe_lcd_e>
}
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <set_cursor>:

/* Sets the cursor on the LCD-screen */
void set_cursor(int row, int position) {
	if (row != 1 && row != 2) return;
 3ba:	9c 01       	movw	r18, r24
 3bc:	21 50       	subi	r18, 0x01	; 1
 3be:	31 09       	sbc	r19, r1
 3c0:	22 30       	cpi	r18, 0x02	; 2
 3c2:	31 05       	cpc	r19, r1
 3c4:	60 f4       	brcc	.+24     	; 0x3de <set_cursor+0x24>
	
	if (row == 1) { // 15 is the max width on the LCD-screen
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	91 05       	cpc	r25, r1
 3ca:	21 f4       	brne	.+8      	; 0x3d4 <set_cursor+0x1a>
		lcd_write_command(0x80 + position);
 3cc:	80 e8       	ldi	r24, 0x80	; 128
 3ce:	86 0f       	add	r24, r22
 3d0:	e4 cf       	rjmp	.-56     	; 0x39a <lcd_write_command>
 3d2:	08 95       	ret
	} else if (row == 2) {
 3d4:	02 97       	sbiw	r24, 0x02	; 2
 3d6:	19 f4       	brne	.+6      	; 0x3de <set_cursor+0x24>
		lcd_write_command(0xC0 + position);
 3d8:	80 ec       	ldi	r24, 0xC0	; 192
 3da:	86 0f       	add	r24, r22
 3dc:	de cf       	rjmp	.-68     	; 0x39a <lcd_write_command>
 3de:	08 95       	ret

000003e0 <lcd_clear>:
	//0x80 is the hex for the standard position of the cursor (16x2 so above row on the left)
}

/* Clears the LCD-screen */
void lcd_clear() {
	lcd_write_command (0x01); // Empty display
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	db df       	rcall	.-74     	; 0x39a <lcd_write_command>
 3e4:	8f e9       	ldi	r24, 0x9F	; 159
 3e6:	9f e0       	ldi	r25, 0x0F	; 15
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <lcd_clear+0x8>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <lcd_clear+0xe>
 3ee:	00 00       	nop
	_delay_ms(2); // Time needed to register
	lcd_write_command (0x80); // Set cursor to start
 3f0:	80 e8       	ldi	r24, 0x80	; 128
 3f2:	d3 cf       	rjmp	.-90     	; 0x39a <lcd_write_command>
 3f4:	08 95       	ret

000003f6 <calculate_digits>:
	}
}

/* Calculates numbers to write to the 7 segment display 
   The total number can be both positive and negative! */
void calculate_digits(int temp) {
 3f6:	6f 92       	push	r6
 3f8:	7f 92       	push	r7
 3fa:	8f 92       	push	r8
 3fc:	9f 92       	push	r9
 3fe:	af 92       	push	r10
 400:	bf 92       	push	r11
 402:	cf 92       	push	r12
 404:	df 92       	push	r13
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	9c 01       	movw	r18, r24
	if (temp < 0) {
 414:	99 23       	and	r25, r25
 416:	1c f4       	brge	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		temp = -(temp);  // Make positive
 418:	31 95       	neg	r19
 41a:	21 95       	neg	r18
 41c:	31 09       	sbc	r19, r1
	}

	// NOTE: The DHT11 sensor cannot read digits after the ','. We need a DHT22 for those digits.
	// Get individual numbers to display
	int digit1 = temp % 10;       // Single units
 41e:	ea e0       	ldi	r30, 0x0A	; 10
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	c9 01       	movw	r24, r18
 424:	bf 01       	movw	r22, r30
 426:	51 d2       	rcall	.+1186   	; 0x8ca <__divmodhi4>
 428:	c8 2e       	mov	r12, r24
 42a:	d9 2e       	mov	r13, r25
 42c:	08 2f       	mov	r16, r24
 42e:	19 2f       	mov	r17, r25
	int digit2 = (temp / 10) % 10; // Tens
 430:	cb 01       	movw	r24, r22
 432:	bf 01       	movw	r22, r30
 434:	4a d2       	rcall	.+1172   	; 0x8ca <__divmodhi4>
 436:	a8 2e       	mov	r10, r24
 438:	b9 2e       	mov	r11, r25
 43a:	e8 2e       	mov	r14, r24
 43c:	f9 2e       	mov	r15, r25
	int digit3 = (temp / 100) % 10; // Hunderds
 43e:	c9 01       	movw	r24, r18
 440:	64 e6       	ldi	r22, 0x64	; 100
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	42 d2       	rcall	.+1156   	; 0x8ca <__divmodhi4>
 446:	cb 01       	movw	r24, r22
 448:	bf 01       	movw	r22, r30
 44a:	3f d2       	rcall	.+1150   	; 0x8ca <__divmodhi4>
 44c:	88 2e       	mov	r8, r24
 44e:	99 2e       	mov	r9, r25
 450:	c8 2f       	mov	r28, r24
 452:	d9 2f       	mov	r29, r25
	int digit4 = (temp / 1000) % 10; // Thousands
 454:	c9 01       	movw	r24, r18
 456:	68 ee       	ldi	r22, 0xE8	; 232
 458:	73 e0       	ldi	r23, 0x03	; 3
 45a:	37 d2       	rcall	.+1134   	; 0x8ca <__divmodhi4>
 45c:	cb 01       	movw	r24, r22
 45e:	bf 01       	movw	r22, r30
 460:	34 d2       	rcall	.+1128   	; 0x8ca <__divmodhi4>
 462:	68 2e       	mov	r6, r24
 464:	79 2e       	mov	r7, r25
 466:	00 97       	sbiw	r24, 0x00	; 0
	
	// Display the numbers (0x0A = '-' and 0x0F = empty)
	if (digit4 == 0 && digit3 != 0) { // Temperatures: 100-999
 468:	d1 f4       	brne	.+52     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 46a:	20 97       	sbiw	r28, 0x00	; 0
 46c:	c1 f0       	breq	.+48     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 46e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <isNegative>
		if (isNegative) {
 472:	88 23       	and	r24, r24
 474:	51 f0       	breq	.+20     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 476:	2a e0       	ldi	r18, 0x0A	; 10
			display_numbers(digit1, digit2, digit3, 0x0A);
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	48 2d       	mov	r20, r8
 47c:	59 2d       	mov	r21, r9
 47e:	6a 2d       	mov	r22, r10
 480:	7b 2d       	mov	r23, r11
 482:	8c 2d       	mov	r24, r12
 484:	9d 2d       	mov	r25, r13
 486:	0b d2       	rcall	.+1046   	; 0x89e <display_numbers>
 488:	67 c0       	rjmp	.+206    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 48a:	2f e0       	ldi	r18, 0x0F	; 15
		} else {
			display_numbers(digit1, digit2, digit3, 0x0F);
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	48 2d       	mov	r20, r8
 490:	59 2d       	mov	r21, r9
 492:	6a 2d       	mov	r22, r10
 494:	7b 2d       	mov	r23, r11
 496:	8c 2d       	mov	r24, r12
 498:	9d 2d       	mov	r25, r13
 49a:	01 d2       	rcall	.+1026   	; 0x89e <display_numbers>
 49c:	5d c0       	rjmp	.+186    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 49e:	00 97       	sbiw	r24, 0x00	; 0
		}
	} else if (digit4 == 0 && digit3 == 0 && digit2 != 0) { // Temperatures: 10-99
 4a0:	e9 f4       	brne	.+58     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4a2:	20 97       	sbiw	r28, 0x00	; 0
 4a4:	d9 f4       	brne	.+54     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4a6:	e1 14       	cp	r14, r1
 4a8:	f1 04       	cpc	r15, r1
 4aa:	c1 f0       	breq	.+48     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4ac:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <isNegative>
		if (isNegative) {
 4b0:	88 23       	and	r24, r24
 4b2:	51 f0       	breq	.+20     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4b4:	2f e0       	ldi	r18, 0x0F	; 15
			display_numbers(digit1, digit2, 0x0A, 0x0F);
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	4a e0       	ldi	r20, 0x0A	; 10
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	6a 2d       	mov	r22, r10
 4be:	7b 2d       	mov	r23, r11
 4c0:	8c 2d       	mov	r24, r12
 4c2:	9d 2d       	mov	r25, r13
 4c4:	ec d1       	rcall	.+984    	; 0x89e <display_numbers>
 4c6:	48 c0       	rjmp	.+144    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 4c8:	2f e0       	ldi	r18, 0x0F	; 15
		} else {
			display_numbers(digit1, digit2, 0x0F, 0x0F);
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	4f e0       	ldi	r20, 0x0F	; 15
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	6a 2d       	mov	r22, r10
 4d2:	7b 2d       	mov	r23, r11
 4d4:	8c 2d       	mov	r24, r12
 4d6:	9d 2d       	mov	r25, r13
 4d8:	e2 d1       	rcall	.+964    	; 0x89e <display_numbers>
 4da:	3e c0       	rjmp	.+124    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 4dc:	00 97       	sbiw	r24, 0x00	; 0
 4de:	e9 f4       	brne	.+58     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
		}
	} else if (digit4 == 0 && digit3 == 0 && digit2 == 0) { // Temperatures: 0-9
 4e0:	20 97       	sbiw	r28, 0x00	; 0
 4e2:	d9 f4       	brne	.+54     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 4e4:	e1 14       	cp	r14, r1
 4e6:	f1 04       	cpc	r15, r1
 4e8:	c1 f4       	brne	.+48     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 4ea:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <isNegative>
		if (isNegative) {
 4ee:	88 23       	and	r24, r24
 4f0:	51 f0       	breq	.+20     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4f2:	2f e0       	ldi	r18, 0x0F	; 15
			display_numbers(digit1, 0x0A, 0x0F, 0x0F);
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	4f e0       	ldi	r20, 0x0F	; 15
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	6a e0       	ldi	r22, 0x0A	; 10
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	8c 2d       	mov	r24, r12
 500:	9d 2d       	mov	r25, r13
 502:	cd d1       	rcall	.+922    	; 0x89e <display_numbers>
 504:	29 c0       	rjmp	.+82     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 506:	2f e0       	ldi	r18, 0x0F	; 15
		} else {
			display_numbers(digit1, 0x0F, 0x0F, 0x0F);
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	4f e0       	ldi	r20, 0x0F	; 15
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	6f e0       	ldi	r22, 0x0F	; 15
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	8c 2d       	mov	r24, r12
 514:	9d 2d       	mov	r25, r13
 516:	c3 d1       	rcall	.+902    	; 0x89e <display_numbers>
 518:	1f c0       	rjmp	.+62     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 51a:	89 2b       	or	r24, r25
 51c:	e9 f4       	brne	.+58     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
		}
	} else if (digit4 == 0 && digit3 == 0 && digit2 == 0 && digit1 == 0) { // Temperatures: Exactly 0
 51e:	cd 2b       	or	r28, r29
 520:	d9 f4       	brne	.+54     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 522:	ef 28       	or	r14, r15
 524:	c9 f4       	brne	.+50     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 526:	01 2b       	or	r16, r17
 528:	b9 f4       	brne	.+46     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 52a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <isNegative>
		if (isNegative) {
 52e:	88 23       	and	r24, r24
 530:	51 f0       	breq	.+20     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 532:	2f e0       	ldi	r18, 0x0F	; 15
			display_numbers(0, 0x0A, 0x0F, 0x0F);
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	4f e0       	ldi	r20, 0x0F	; 15
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	6a e0       	ldi	r22, 0x0A	; 10
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	ad d1       	rcall	.+858    	; 0x89e <display_numbers>
 544:	09 c0       	rjmp	.+18     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 546:	2f e0       	ldi	r18, 0x0F	; 15
		} else {
			display_numbers(0, 0x0F, 0x0F, 0x0F);
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	4f e0       	ldi	r20, 0x0F	; 15
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	6f e0       	ldi	r22, 0x0F	; 15
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	a3 d1       	rcall	.+838    	; 0x89e <display_numbers>
 558:	ea e2       	ldi	r30, 0x2A	; 42
 55a:	f1 e0       	ldi	r31, 0x01	; 1
		}
	}
	
	// Add to array to beep
	digitsToBeep[0] = digit4;
 55c:	60 82       	st	Z, r6
 55e:	71 82       	std	Z+1, r7	; 0x01
 560:	82 82       	std	Z+2, r8	; 0x02
 562:	93 82       	std	Z+3, r9	; 0x03
	digitsToBeep[1] = digit3;
 564:	a4 82       	std	Z+4, r10	; 0x04
 566:	b5 82       	std	Z+5, r11	; 0x05
	digitsToBeep[2] = digit2;
 568:	c6 82       	std	Z+6, r12	; 0x06
 56a:	d7 82       	std	Z+7, r13	; 0x07
	digitsToBeep[3] = digit1;
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
}
 570:	1f 91       	pop	r17
 572:	0f 91       	pop	r16
 574:	ff 90       	pop	r15
 576:	ef 90       	pop	r14
 578:	df 90       	pop	r13
 57a:	cf 90       	pop	r12
 57c:	bf 90       	pop	r11
 57e:	af 90       	pop	r10
 580:	9f 90       	pop	r9
 582:	8f 90       	pop	r8
 584:	7f 90       	pop	r7
 586:	6f 90       	pop	r6
 588:	08 95       	ret

0000058a <init_timer1>:
 58a:	8e b5       	in	r24, 0x2e	; 46
 58c:	88 60       	ori	r24, 0x08	; 8

/* Initializes Timer1 */
void init_timer1() {
	// Set timer in CTC mode (Clear Timer on Compare Match)
	TCCR1B |= (1 << WGM12);  // (CTC mode)
 58e:	8e bd       	out	0x2e, r24	; 46
	
	// Prescaler on 1024
	TCCR1B |= (1 << CS12) | (1 << CS10);
 590:	8e b5       	in	r24, 0x2e	; 46
 592:	85 60       	ori	r24, 0x05	; 5
 594:	8e bd       	out	0x2e, r24	; 46
	
	// Value A compare register
	OCR1A = 19530; // 2 second delay time
 596:	8a e4       	ldi	r24, 0x4A	; 74
 598:	9c e4       	ldi	r25, 0x4C	; 76
 59a:	9b bd       	out	0x2b, r25	; 43
 59c:	8a bd       	out	0x2a, r24	; 42
	
	// Value B compare register
	OCR1B = 78120; // 8 second delay time
 59e:	88 e2       	ldi	r24, 0x28	; 40
 5a0:	91 e3       	ldi	r25, 0x31	; 49
 5a2:	99 bd       	out	0x29, r25	; 41
 5a4:	88 bd       	out	0x28, r24	; 40
	
	// Enable interrupts for Timer1
	TIMSK |= (1 << OCIE1A) | (1 << OCIE1B); // Enable interrupt for compare match A and compare match B
 5a6:	87 b7       	in	r24, 0x37	; 55
 5a8:	88 61       	ori	r24, 0x18	; 24
 5aa:	87 bf       	out	0x37, r24	; 55
 5ac:	08 95       	ret

000005ae <__vector_12>:
}

/* Timer1 Compare match A interupt for getting DHT11 data */
ISR(TIMER1_COMPA_vect) {
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	0b b6       	in	r0, 0x3b	; 59
 5ba:	0f 92       	push	r0
 5bc:	2f 93       	push	r18
 5be:	3f 93       	push	r19
 5c0:	4f 93       	push	r20
 5c2:	5f 93       	push	r21
 5c4:	6f 93       	push	r22
 5c6:	7f 93       	push	r23
 5c8:	8f 93       	push	r24
 5ca:	9f 93       	push	r25
 5cc:	af 93       	push	r26
 5ce:	bf 93       	push	r27
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31
	lastGottenData = gottenData; // Keep track of last data
 5d4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <gottenData>
 5d8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <gottenData+0x1>
 5dc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <lastGottenData+0x1>
 5e0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lastGottenData>
	gottenData = DHT11_get_data(); // Get temperature and Humidity
 5e4:	63 de       	rcall	.-826    	; 0x2ac <DHT11_get_data>
 5e6:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <gottenData+0x1>
 5ea:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <gottenData>
	
	gottenData.temperature = -21; // Example to show negative temperatures
 5ee:	e2 e3       	ldi	r30, 0x32	; 50
 5f0:	f1 e0       	ldi	r31, 0x01	; 1
 5f2:	8b ee       	ldi	r24, 0xEB	; 235
 5f4:	80 83       	st	Z, r24
	
	if (gottenData.temperature < 0) { // Mark number as negative if below 0
 5f6:	80 81       	ld	r24, Z
 5f8:	88 23       	and	r24, r24
 5fa:	24 f4       	brge	.+8      	; 0x604 <__vector_12+0x56>
		isNegative = true;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <isNegative>
 602:	02 c0       	rjmp	.+4      	; 0x608 <__vector_12+0x5a>
	} else {
		isNegative = false;
 604:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <isNegative>
	}
}
 608:	ff 91       	pop	r31
 60a:	ef 91       	pop	r30
 60c:	bf 91       	pop	r27
 60e:	af 91       	pop	r26
 610:	9f 91       	pop	r25
 612:	8f 91       	pop	r24
 614:	7f 91       	pop	r23
 616:	6f 91       	pop	r22
 618:	5f 91       	pop	r21
 61a:	4f 91       	pop	r20
 61c:	3f 91       	pop	r19
 61e:	2f 91       	pop	r18
 620:	0f 90       	pop	r0
 622:	0b be       	out	0x3b, r0	; 59
 624:	0f 90       	pop	r0
 626:	0f be       	out	0x3f, r0	; 63
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

0000062e <update_lcd>:

/* Helper method to update the Lcd display */
void update_lcd() {
 62e:	0f 93       	push	r16
 630:	1f 93       	push	r17
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
	lcd_clear(); // Clear plus go to first row
 636:	d4 de       	rcall	.-600    	; 0x3e0 <lcd_clear>
	sprintf(buffer, "Temperature: %d", gottenData.temperature);
 638:	02 e3       	ldi	r16, 0x32	; 50
 63a:	11 e0       	ldi	r17, 0x01	; 1
 63c:	f8 01       	movw	r30, r16
 63e:	80 81       	ld	r24, Z
 640:	28 2f       	mov	r18, r24
 642:	08 2e       	mov	r0, r24
 644:	00 0c       	add	r0, r0
 646:	33 0b       	sbc	r19, r19
 648:	3f 93       	push	r19
 64a:	8f 93       	push	r24
 64c:	88 e0       	ldi	r24, 0x08	; 8
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	9f 93       	push	r25
 652:	8f 93       	push	r24
 654:	c4 e3       	ldi	r28, 0x34	; 52
 656:	d1 e0       	ldi	r29, 0x01	; 1
 658:	df 93       	push	r29
 65a:	cf 93       	push	r28
 65c:	8e d1       	rcall	.+796    	; 0x97a <sprintf>
	display_text(buffer);
 65e:	ce 01       	movw	r24, r28
 660:	90 de       	rcall	.-736    	; 0x382 <display_text>
 662:	60 e0       	ldi	r22, 0x00	; 0
	
	set_cursor(2, 0); // Write to second row
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	a7 de       	rcall	.-690    	; 0x3ba <set_cursor>
 66c:	f8 01       	movw	r30, r16
	sprintf(buffer, "Humidity: %d", gottenData.humidity);
 66e:	81 81       	ldd	r24, Z+1	; 0x01
 670:	1f 92       	push	r1
 672:	8f 93       	push	r24
 674:	88 e1       	ldi	r24, 0x18	; 24
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	9f 93       	push	r25
 67a:	8f 93       	push	r24
 67c:	df 93       	push	r29
 67e:	cf 93       	push	r28
 680:	7c d1       	rcall	.+760    	; 0x97a <sprintf>
	display_text(buffer);
 682:	ce 01       	movw	r24, r28
 684:	7e de       	rcall	.-772    	; 0x382 <display_text>
 686:	ed b7       	in	r30, 0x3d	; 61
}
 688:	fe b7       	in	r31, 0x3e	; 62
 68a:	3c 96       	adiw	r30, 0x0c	; 12
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	f8 94       	cli
 690:	fe bf       	out	0x3e, r31	; 62
 692:	0f be       	out	0x3f, r0	; 63
 694:	ed bf       	out	0x3d, r30	; 61
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	08 95       	ret

000006a0 <__vector_13>:
 6a0:	1f 92       	push	r1

/* Timer1 Compare Match B interrupt for updating displays */
ISR(TIMER1_COMPB_vect) {
 6a2:	0f 92       	push	r0
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	0f 92       	push	r0
 6a8:	11 24       	eor	r1, r1
 6aa:	0b b6       	in	r0, 0x3b	; 59
 6ac:	0f 92       	push	r0
 6ae:	2f 93       	push	r18
 6b0:	3f 93       	push	r19
 6b2:	4f 93       	push	r20
 6b4:	5f 93       	push	r21
 6b6:	6f 93       	push	r22
 6b8:	7f 93       	push	r23
 6ba:	8f 93       	push	r24
 6bc:	9f 93       	push	r25
 6be:	af 93       	push	r26
 6c0:	bf 93       	push	r27
 6c2:	ef 93       	push	r30
 6c4:	ff 93       	push	r31
	if (lastGottenData.temperature == gottenData.temperature &&
 6c6:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <lastGottenData>
 6ca:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <gottenData>
 6ce:	98 13       	cpse	r25, r24
 6d0:	06 c0       	rjmp	.+12     	; 0x6de <__vector_13+0x3e>
	lastGottenData.humidity == gottenData.humidity) return; // Only update on new data
 6d2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <lastGottenData+0x1>
 6d6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <gottenData+0x1>
	display_text(buffer);
}

/* Timer1 Compare Match B interrupt for updating displays */
ISR(TIMER1_COMPB_vect) {
	if (lastGottenData.temperature == gottenData.temperature &&
 6da:	98 17       	cp	r25, r24
 6dc:	a1 f0       	breq	.+40     	; 0x706 <__vector_13+0x66>
	lastGottenData.humidity == gottenData.humidity) return; // Only update on new data
	
	if (lastGottenData.temperature != gottenData.temperature) { // Temperature changed
 6de:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <lastGottenData>
 6e2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <gottenData>
 6e6:	98 17       	cp	r25, r24
 6e8:	41 f0       	breq	.+16     	; 0x6fa <__vector_13+0x5a>
		// Update 7-segmented display
		calculate_digits(gottenData.temperature);
 6ea:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <gottenData>
 6ee:	08 2e       	mov	r0, r24
 6f0:	00 0c       	add	r0, r0
 6f2:	99 0b       	sbc	r25, r25
 6f4:	80 de       	rcall	.-768    	; 0x3f6 <calculate_digits>
		
		// Update LCD
		update_lcd();
 6f6:	9b df       	rcall	.-202    	; 0x62e <update_lcd>
 6f8:	06 c0       	rjmp	.+12     	; 0x706 <__vector_13+0x66>
 6fa:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <lastGottenData+0x1>
	} else if (lastGottenData.humidity != gottenData.humidity) { // Humidity changed
 6fe:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <gottenData+0x1>
 702:	98 13       	cpse	r25, r24
		// Update LCD
		update_lcd();
 704:	94 df       	rcall	.-216    	; 0x62e <update_lcd>
 706:	ff 91       	pop	r31
	}
}
 708:	ef 91       	pop	r30
 70a:	bf 91       	pop	r27
 70c:	af 91       	pop	r26
 70e:	9f 91       	pop	r25
 710:	8f 91       	pop	r24
 712:	7f 91       	pop	r23
 714:	6f 91       	pop	r22
 716:	5f 91       	pop	r21
 718:	4f 91       	pop	r20
 71a:	3f 91       	pop	r19
 71c:	2f 91       	pop	r18
 71e:	0f 90       	pop	r0
 720:	0b be       	out	0x3b, r0	; 59
 722:	0f 90       	pop	r0
 724:	0f be       	out	0x3f, r0	; 63
 726:	0f 90       	pop	r0
 728:	1f 90       	pop	r1
 72a:	18 95       	reti

0000072c <__vector_1>:
 72c:	1f 92       	push	r1

/* Interrupt for button press (PE0) */
ISR(INT0_vect) {
 72e:	0f 92       	push	r0
 730:	0f b6       	in	r0, 0x3f	; 63
 732:	0f 92       	push	r0
 734:	11 24       	eor	r1, r1
 736:	0b b6       	in	r0, 0x3b	; 59
 738:	0f 92       	push	r0
 73a:	2f 93       	push	r18
 73c:	3f 93       	push	r19
 73e:	4f 93       	push	r20
 740:	5f 93       	push	r21
 742:	6f 93       	push	r22
 744:	7f 93       	push	r23
 746:	8f 93       	push	r24
 748:	9f 93       	push	r25
 74a:	af 93       	push	r26
 74c:	bf 93       	push	r27
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
	if (is_button_pressed() && !buttonPressedLast) {
 756:	ca dc       	rcall	.-1644   	; 0xec <is_button_pressed>
 758:	89 2b       	or	r24, r25
 75a:	81 f1       	breq	.+96     	; 0x7bc <__vector_1+0x90>
 75c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 760:	81 11       	cpse	r24, r1
 762:	2c c0       	rjmp	.+88     	; 0x7bc <__vector_1+0x90>
		// Play beep for all of the digits of the temperature
		buttonPressedLast = 1;
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
		
		// If the number is negative, beep the '-' symbol on a high frequency
		if (isNegative) {
 76a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <isNegative>
 76e:	88 23       	and	r24, r24
 770:	29 f0       	breq	.+10     	; 0x77c <__vector_1+0x50>
			beep_for_digit(1, 1500);
 772:	6c ed       	ldi	r22, 0xDC	; 220
 774:	75 e0       	ldi	r23, 0x05	; 5
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	16 dd       	rcall	.-1492   	; 0x1a8 <beep_for_digit>
		update_lcd();
	}
}

/* Interrupt for button press (PE0) */
ISR(INT0_vect) {
 77c:	c0 e0       	ldi	r28, 0x00	; 0
 77e:	d0 e0       	ldi	r29, 0x00	; 0
 780:	0f c0       	rjmp	.+30     	; 0x7a0 <__vector_1+0x74>
		if (isNegative) {
			beep_for_digit(1, 1500);
		}
		// Beep each digit seperatively
		for (int i = 0; i < sizeof(digitsToBeep)/sizeof(digitsToBeep[0]); i++) {
			beep_for_digit(digitsToBeep[i], frequenciesToPlay[i]);
 782:	ce 01       	movw	r24, r28
 784:	88 0f       	add	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	fc 01       	movw	r30, r24
 78a:	e0 50       	subi	r30, 0x00	; 0
 78c:	ff 4f       	sbci	r31, 0xFF	; 255
 78e:	60 81       	ld	r22, Z
 790:	71 81       	ldd	r23, Z+1	; 0x01
 792:	fc 01       	movw	r30, r24
 794:	e6 5d       	subi	r30, 0xD6	; 214
 796:	fe 4f       	sbci	r31, 0xFE	; 254
 798:	80 81       	ld	r24, Z
 79a:	91 81       	ldd	r25, Z+1	; 0x01
 79c:	05 dd       	rcall	.-1526   	; 0x1a8 <beep_for_digit>
		// If the number is negative, beep the '-' symbol on a high frequency
		if (isNegative) {
			beep_for_digit(1, 1500);
		}
		// Beep each digit seperatively
		for (int i = 0; i < sizeof(digitsToBeep)/sizeof(digitsToBeep[0]); i++) {
 79e:	21 96       	adiw	r28, 0x01	; 1
 7a0:	c4 30       	cpi	r28, 0x04	; 4
 7a2:	d1 05       	cpc	r29, r1
 7a4:	70 f3       	brcs	.-36     	; 0x782 <__vector_1+0x56>
 7a6:	2f e7       	ldi	r18, 0x7F	; 127
 7a8:	8a e1       	ldi	r24, 0x1A	; 26
 7aa:	96 e0       	ldi	r25, 0x06	; 6
 7ac:	21 50       	subi	r18, 0x01	; 1
 7ae:	80 40       	sbci	r24, 0x00	; 0
 7b0:	90 40       	sbci	r25, 0x00	; 0
 7b2:	e1 f7       	brne	.-8      	; 0x7ac <__vector_1+0x80>
 7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <__vector_1+0x8a>
 7b6:	00 00       	nop
			beep_for_digit(digitsToBeep[i], frequenciesToPlay[i]);
		}
		_delay_ms(200); // Debounce delay
		buttonPressedLast = 0;
 7b8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
	}
}
 7bc:	ff 91       	pop	r31
 7be:	ef 91       	pop	r30
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	bf 91       	pop	r27
 7c6:	af 91       	pop	r26
 7c8:	9f 91       	pop	r25
 7ca:	8f 91       	pop	r24
 7cc:	7f 91       	pop	r23
 7ce:	6f 91       	pop	r22
 7d0:	5f 91       	pop	r21
 7d2:	4f 91       	pop	r20
 7d4:	3f 91       	pop	r19
 7d6:	2f 91       	pop	r18
 7d8:	0f 90       	pop	r0
 7da:	0b be       	out	0x3b, r0	; 59
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti

000007e6 <init_all>:

/* General init */
void init_all() {
	init_button(); // Initialize button for interrupts
 7e6:	70 dc       	rcall	.-1824   	; 0xc8 <init_button>
	
	init_buzzer(); // Initialize buzzer
 7e8:	92 dc       	rcall	.-1756   	; 0x10e <init_buzzer>
 7ea:	8f ef       	ldi	r24, 0xFF	; 255
	
	DDRC = 0xFF; // PORTD(7) output, PORTD(6:0) input
 7ec:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;  // Set PORTC pin as output for LCD display select
	init_lcd(); // Initialize LCD-screen
 7ee:	85 bb       	out	0x15, r24	; 21
	lcd_clear(); // Also clear on startup
 7f0:	9c dd       	rcall	.-1224   	; 0x32a <init_lcd>
	
	init_timer1(); // Initialize Timer1
 7f2:	f6 dd       	rcall	.-1044   	; 0x3e0 <lcd_clear>
 7f4:	ca de       	rcall	.-620    	; 0x58a <init_timer1>
	
	init_spi(); // Initialize spi module
 7f6:	05 d0       	rcall	.+10     	; 0x802 <init_spi>
 7f8:	44 c0       	rjmp	.+136    	; 0x882 <init_display_driver>
	init_display_driver(); // Initialize display chip
 7fa:	08 95       	ret

000007fc <main>:
 7fc:	f4 df       	rcall	.-24     	; 0x7e6 <init_all>
 7fe:	78 94       	sei
}

/* Running method */
int main() {
	init_all();
	sei(); // Enable interrupts
 800:	ff cf       	rjmp	.-2      	; 0x800 <main+0x4>

00000802 <init_spi>:

#include "Spi.h"

/* Init method for the 7 segment display (SPI) */
void init_spi(void) {
	DDR_SPI = 0xff;								// All pins output: MOSI, SCK, SS, SS_display as output
 802:	8f ef       	ldi	r24, 0xFF	; 255
 804:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~BIT(SPI_MISO);					// 	except: MISO input
 806:	87 b3       	in	r24, 0x17	; 23
 808:	87 7f       	andi	r24, 0xF7	; 247
 80a:	87 bb       	out	0x17, r24	; 23
	PORT_SPI |= BIT(SPI_SS);					// SS_ADC == 1: deselect slave
 80c:	88 b3       	in	r24, 0x18	; 24
 80e:	81 60       	ori	r24, 0x01	; 1
 810:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR1);	// or: SPCR = 0b11010010;
 812:	82 e5       	ldi	r24, 0x52	; 82
 814:	8d b9       	out	0x0d, r24	; 13
 816:	08 95       	ret

00000818 <spi_write>:
	// Mode = 0: CPOL=0, CPPH=0;
}

/* Write a byte from master to slave */
void spi_write(unsigned char data) {
	SPDR = data;							// Load byte to Data register --> starts transmission
 818:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & BIT(SPIF))); 			// Wait for transmission complete
 81a:	77 9b       	sbis	0x0e, 7	; 14
 81c:	fe cf       	rjmp	.-4      	; 0x81a <spi_write+0x2>
}
 81e:	08 95       	ret

00000820 <spi_slave_select>:

/* Select device on pinnumer PORTB (7 segment display) */
void spi_slave_select(unsigned char chipNumber) {
	PORTB &= ~BIT(chipNumber);
 820:	98 b3       	in	r25, 0x18	; 24
 822:	21 e0       	ldi	r18, 0x01	; 1
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	02 c0       	rjmp	.+4      	; 0x82c <spi_slave_select+0xc>
 828:	22 0f       	add	r18, r18
 82a:	33 1f       	adc	r19, r19
 82c:	8a 95       	dec	r24
 82e:	e2 f7       	brpl	.-8      	; 0x828 <spi_slave_select+0x8>
 830:	20 95       	com	r18
 832:	29 23       	and	r18, r25
 834:	28 bb       	out	0x18, r18	; 24
 836:	08 95       	ret

00000838 <spi_slave_deselect>:
}

/* Deselect device on pinnumer PORTB (7 segment display) */
void spi_slave_deselect(unsigned char chipNumber) {
	PORTB |= BIT(chipNumber);
 838:	98 b3       	in	r25, 0x18	; 24
 83a:	21 e0       	ldi	r18, 0x01	; 1
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	02 c0       	rjmp	.+4      	; 0x844 <spi_slave_deselect+0xc>
 840:	22 0f       	add	r18, r18
 842:	33 1f       	adc	r19, r19
 844:	8a 95       	dec	r24
 846:	e2 f7       	brpl	.-8      	; 0x840 <spi_slave_deselect+0x8>
 848:	29 2b       	or	r18, r25
 84a:	28 bb       	out	0x18, r18	; 24
 84c:	08 95       	ret

0000084e <spi_write_word>:
}

/* Write a character to slave */
void spi_write_word (unsigned char adress, unsigned char data) {
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	d8 2f       	mov	r29, r24
 854:	c6 2f       	mov	r28, r22
	spi_slave_select(0);			// Select display chip
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	e3 df       	rcall	.-58     	; 0x820 <spi_slave_select>
	spi_write(adress);      		// Register 0A: Intensity
 85a:	8d 2f       	mov	r24, r29
 85c:	dd df       	rcall	.-70     	; 0x818 <spi_write>
	spi_write(data);    			// -> Level in specified range
 85e:	8c 2f       	mov	r24, r28
 860:	db df       	rcall	.-74     	; 0x818 <spi_write>
	spi_slave_deselect(0);			// Deselect display chip
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	e9 df       	rcall	.-46     	; 0x838 <spi_slave_deselect>
 866:	df 91       	pop	r29
}
 868:	cf 91       	pop	r28
 86a:	08 95       	ret

0000086c <clear_segment_display>:
 86c:	cf 93       	push	r28

/* Clear 7 segment display (display all zero's) */
void clear_segment_display() {
	for (char i = 1; i <= 4; i++) {
 86e:	c1 e0       	ldi	r28, 0x01	; 1
 870:	04 c0       	rjmp	.+8      	; 0x87a <clear_segment_display+0xe>
		spi_write_word(i, 0);
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	8c 2f       	mov	r24, r28
 876:	eb df       	rcall	.-42     	; 0x84e <spi_write_word>
	spi_slave_deselect(0);			// Deselect display chip
}

/* Clear 7 segment display (display all zero's) */
void clear_segment_display() {
	for (char i = 1; i <= 4; i++) {
 878:	cf 5f       	subi	r28, 0xFF	; 255
 87a:	c5 30       	cpi	r28, 0x05	; 5
 87c:	d0 f3       	brcs	.-12     	; 0x872 <clear_segment_display+0x6>
		spi_write_word(i, 0);
	}
}
 87e:	cf 91       	pop	r28
 880:	08 95       	ret

00000882 <init_display_driver>:

/* Initialize the driver chip (type MAX 7219) */
void init_display_driver() {
	spi_write_word(0x09, 0xFF);
 882:	6f ef       	ldi	r22, 0xFF	; 255
 884:	89 e0       	ldi	r24, 0x09	; 9
 886:	e3 df       	rcall	.-58     	; 0x84e <spi_write_word>
	spi_write_word(0x0A, 0x0F);
 888:	6f e0       	ldi	r22, 0x0F	; 15
 88a:	8a e0       	ldi	r24, 0x0A	; 10
 88c:	e0 df       	rcall	.-64     	; 0x84e <spi_write_word>
	spi_write_word(0x0B, 0x03);
 88e:	63 e0       	ldi	r22, 0x03	; 3
 890:	8b e0       	ldi	r24, 0x0B	; 11
 892:	dd df       	rcall	.-70     	; 0x84e <spi_write_word>
	spi_write_word(0x0C, 0x01);
 894:	61 e0       	ldi	r22, 0x01	; 1
 896:	8c e0       	ldi	r24, 0x0C	; 12
 898:	da df       	rcall	.-76     	; 0x84e <spi_write_word>
	
	clear_segment_display(); // Clear when setup is complete
 89a:	e8 cf       	rjmp	.-48     	; 0x86c <clear_segment_display>
 89c:	08 95       	ret

0000089e <display_numbers>:
 89e:	1f 93       	push	r17
}

/* Helper method to quickly display digits */
void display_numbers(int digit1, int digit2, int digit3, int digit4) {
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	16 2f       	mov	r17, r22
 8a6:	d4 2f       	mov	r29, r20
 8a8:	c2 2f       	mov	r28, r18
	spi_write_word(1, digit1);
 8aa:	68 2f       	mov	r22, r24
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	cf df       	rcall	.-98     	; 0x84e <spi_write_word>
	spi_write_word(2, digit2);
 8b0:	61 2f       	mov	r22, r17
 8b2:	82 e0       	ldi	r24, 0x02	; 2
 8b4:	cc df       	rcall	.-104    	; 0x84e <spi_write_word>
	spi_write_word(3, digit3);
 8b6:	6d 2f       	mov	r22, r29
 8b8:	83 e0       	ldi	r24, 0x03	; 3
 8ba:	c9 df       	rcall	.-110    	; 0x84e <spi_write_word>
	spi_write_word(4, digit4);
 8bc:	6c 2f       	mov	r22, r28
 8be:	84 e0       	ldi	r24, 0x04	; 4
 8c0:	c6 df       	rcall	.-116    	; 0x84e <spi_write_word>
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	1f 91       	pop	r17
 8c8:	08 95       	ret

000008ca <__divmodhi4>:
 8ca:	97 fb       	bst	r25, 7
 8cc:	07 2e       	mov	r0, r23
 8ce:	16 f4       	brtc	.+4      	; 0x8d4 <__divmodhi4+0xa>
 8d0:	00 94       	com	r0
 8d2:	06 d0       	rcall	.+12     	; 0x8e0 <__divmodhi4_neg1>
 8d4:	77 fd       	sbrc	r23, 7
 8d6:	08 d0       	rcall	.+16     	; 0x8e8 <__divmodhi4_neg2>
 8d8:	3c d0       	rcall	.+120    	; 0x952 <__udivmodhi4>
 8da:	07 fc       	sbrc	r0, 7
 8dc:	05 d0       	rcall	.+10     	; 0x8e8 <__divmodhi4_neg2>
 8de:	3e f4       	brtc	.+14     	; 0x8ee <__divmodhi4_exit>

000008e0 <__divmodhi4_neg1>:
 8e0:	90 95       	com	r25
 8e2:	81 95       	neg	r24
 8e4:	9f 4f       	sbci	r25, 0xFF	; 255
 8e6:	08 95       	ret

000008e8 <__divmodhi4_neg2>:
 8e8:	70 95       	com	r23
 8ea:	61 95       	neg	r22
 8ec:	7f 4f       	sbci	r23, 0xFF	; 255

000008ee <__divmodhi4_exit>:
 8ee:	08 95       	ret

000008f0 <__udivmodsi4>:
 8f0:	a1 e2       	ldi	r26, 0x21	; 33
 8f2:	1a 2e       	mov	r1, r26
 8f4:	aa 1b       	sub	r26, r26
 8f6:	bb 1b       	sub	r27, r27
 8f8:	fd 01       	movw	r30, r26
 8fa:	0d c0       	rjmp	.+26     	; 0x916 <__udivmodsi4_ep>

000008fc <__udivmodsi4_loop>:
 8fc:	aa 1f       	adc	r26, r26
 8fe:	bb 1f       	adc	r27, r27
 900:	ee 1f       	adc	r30, r30
 902:	ff 1f       	adc	r31, r31
 904:	a2 17       	cp	r26, r18
 906:	b3 07       	cpc	r27, r19
 908:	e4 07       	cpc	r30, r20
 90a:	f5 07       	cpc	r31, r21
 90c:	20 f0       	brcs	.+8      	; 0x916 <__udivmodsi4_ep>
 90e:	a2 1b       	sub	r26, r18
 910:	b3 0b       	sbc	r27, r19
 912:	e4 0b       	sbc	r30, r20
 914:	f5 0b       	sbc	r31, r21

00000916 <__udivmodsi4_ep>:
 916:	66 1f       	adc	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	1a 94       	dec	r1
 920:	69 f7       	brne	.-38     	; 0x8fc <__udivmodsi4_loop>
 922:	60 95       	com	r22
 924:	70 95       	com	r23
 926:	80 95       	com	r24
 928:	90 95       	com	r25
 92a:	9b 01       	movw	r18, r22
 92c:	ac 01       	movw	r20, r24
 92e:	bd 01       	movw	r22, r26
 930:	cf 01       	movw	r24, r30
 932:	08 95       	ret

00000934 <__umulhisi3>:
 934:	a2 9f       	mul	r26, r18
 936:	b0 01       	movw	r22, r0
 938:	b3 9f       	mul	r27, r19
 93a:	c0 01       	movw	r24, r0
 93c:	a3 9f       	mul	r26, r19
 93e:	70 0d       	add	r23, r0
 940:	81 1d       	adc	r24, r1
 942:	11 24       	eor	r1, r1
 944:	91 1d       	adc	r25, r1
 946:	b2 9f       	mul	r27, r18
 948:	70 0d       	add	r23, r0
 94a:	81 1d       	adc	r24, r1
 94c:	11 24       	eor	r1, r1
 94e:	91 1d       	adc	r25, r1
 950:	08 95       	ret

00000952 <__udivmodhi4>:
 952:	aa 1b       	sub	r26, r26
 954:	bb 1b       	sub	r27, r27
 956:	51 e1       	ldi	r21, 0x11	; 17
 958:	07 c0       	rjmp	.+14     	; 0x968 <__udivmodhi4_ep>

0000095a <__udivmodhi4_loop>:
 95a:	aa 1f       	adc	r26, r26
 95c:	bb 1f       	adc	r27, r27
 95e:	a6 17       	cp	r26, r22
 960:	b7 07       	cpc	r27, r23
 962:	10 f0       	brcs	.+4      	; 0x968 <__udivmodhi4_ep>
 964:	a6 1b       	sub	r26, r22
 966:	b7 0b       	sbc	r27, r23

00000968 <__udivmodhi4_ep>:
 968:	88 1f       	adc	r24, r24
 96a:	99 1f       	adc	r25, r25
 96c:	5a 95       	dec	r21
 96e:	a9 f7       	brne	.-22     	; 0x95a <__udivmodhi4_loop>
 970:	80 95       	com	r24
 972:	90 95       	com	r25
 974:	bc 01       	movw	r22, r24
 976:	cd 01       	movw	r24, r26
 978:	08 95       	ret

0000097a <sprintf>:
 97a:	0f 93       	push	r16
 97c:	1f 93       	push	r17
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
 982:	cd b7       	in	r28, 0x3d	; 61
 984:	de b7       	in	r29, 0x3e	; 62
 986:	2e 97       	sbiw	r28, 0x0e	; 14
 988:	0f b6       	in	r0, 0x3f	; 63
 98a:	f8 94       	cli
 98c:	de bf       	out	0x3e, r29	; 62
 98e:	0f be       	out	0x3f, r0	; 63
 990:	cd bf       	out	0x3d, r28	; 61
 992:	0d 89       	ldd	r16, Y+21	; 0x15
 994:	1e 89       	ldd	r17, Y+22	; 0x16
 996:	86 e0       	ldi	r24, 0x06	; 6
 998:	8c 83       	std	Y+4, r24	; 0x04
 99a:	1a 83       	std	Y+2, r17	; 0x02
 99c:	09 83       	std	Y+1, r16	; 0x01
 99e:	8f ef       	ldi	r24, 0xFF	; 255
 9a0:	9f e7       	ldi	r25, 0x7F	; 127
 9a2:	9e 83       	std	Y+6, r25	; 0x06
 9a4:	8d 83       	std	Y+5, r24	; 0x05
 9a6:	ae 01       	movw	r20, r28
 9a8:	47 5e       	subi	r20, 0xE7	; 231
 9aa:	5f 4f       	sbci	r21, 0xFF	; 255
 9ac:	6f 89       	ldd	r22, Y+23	; 0x17
 9ae:	78 8d       	ldd	r23, Y+24	; 0x18
 9b0:	ce 01       	movw	r24, r28
 9b2:	01 96       	adiw	r24, 0x01	; 1
 9b4:	10 d0       	rcall	.+32     	; 0x9d6 <vfprintf>
 9b6:	ef 81       	ldd	r30, Y+7	; 0x07
 9b8:	f8 85       	ldd	r31, Y+8	; 0x08
 9ba:	e0 0f       	add	r30, r16
 9bc:	f1 1f       	adc	r31, r17
 9be:	10 82       	st	Z, r1
 9c0:	2e 96       	adiw	r28, 0x0e	; 14
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	f8 94       	cli
 9c6:	de bf       	out	0x3e, r29	; 62
 9c8:	0f be       	out	0x3f, r0	; 63
 9ca:	cd bf       	out	0x3d, r28	; 61
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	1f 91       	pop	r17
 9d2:	0f 91       	pop	r16
 9d4:	08 95       	ret

000009d6 <vfprintf>:
 9d6:	2f 92       	push	r2
 9d8:	3f 92       	push	r3
 9da:	4f 92       	push	r4
 9dc:	5f 92       	push	r5
 9de:	6f 92       	push	r6
 9e0:	7f 92       	push	r7
 9e2:	8f 92       	push	r8
 9e4:	9f 92       	push	r9
 9e6:	af 92       	push	r10
 9e8:	bf 92       	push	r11
 9ea:	cf 92       	push	r12
 9ec:	df 92       	push	r13
 9ee:	ef 92       	push	r14
 9f0:	ff 92       	push	r15
 9f2:	0f 93       	push	r16
 9f4:	1f 93       	push	r17
 9f6:	cf 93       	push	r28
 9f8:	df 93       	push	r29
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	2b 97       	sbiw	r28, 0x0b	; 11
 a00:	0f b6       	in	r0, 0x3f	; 63
 a02:	f8 94       	cli
 a04:	de bf       	out	0x3e, r29	; 62
 a06:	0f be       	out	0x3f, r0	; 63
 a08:	cd bf       	out	0x3d, r28	; 61
 a0a:	6c 01       	movw	r12, r24
 a0c:	7b 01       	movw	r14, r22
 a0e:	8a 01       	movw	r16, r20
 a10:	fc 01       	movw	r30, r24
 a12:	17 82       	std	Z+7, r1	; 0x07
 a14:	16 82       	std	Z+6, r1	; 0x06
 a16:	83 81       	ldd	r24, Z+3	; 0x03
 a18:	81 ff       	sbrs	r24, 1
 a1a:	bf c1       	rjmp	.+894    	; 0xd9a <vfprintf+0x3c4>
 a1c:	ce 01       	movw	r24, r28
 a1e:	01 96       	adiw	r24, 0x01	; 1
 a20:	3c 01       	movw	r6, r24
 a22:	f6 01       	movw	r30, r12
 a24:	93 81       	ldd	r25, Z+3	; 0x03
 a26:	f7 01       	movw	r30, r14
 a28:	93 fd       	sbrc	r25, 3
 a2a:	85 91       	lpm	r24, Z+
 a2c:	93 ff       	sbrs	r25, 3
 a2e:	81 91       	ld	r24, Z+
 a30:	7f 01       	movw	r14, r30
 a32:	88 23       	and	r24, r24
 a34:	09 f4       	brne	.+2      	; 0xa38 <vfprintf+0x62>
 a36:	ad c1       	rjmp	.+858    	; 0xd92 <vfprintf+0x3bc>
 a38:	85 32       	cpi	r24, 0x25	; 37
 a3a:	39 f4       	brne	.+14     	; 0xa4a <vfprintf+0x74>
 a3c:	93 fd       	sbrc	r25, 3
 a3e:	85 91       	lpm	r24, Z+
 a40:	93 ff       	sbrs	r25, 3
 a42:	81 91       	ld	r24, Z+
 a44:	7f 01       	movw	r14, r30
 a46:	85 32       	cpi	r24, 0x25	; 37
 a48:	21 f4       	brne	.+8      	; 0xa52 <vfprintf+0x7c>
 a4a:	b6 01       	movw	r22, r12
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	d6 d1       	rcall	.+940    	; 0xdfc <fputc>
 a50:	e8 cf       	rjmp	.-48     	; 0xa22 <vfprintf+0x4c>
 a52:	91 2c       	mov	r9, r1
 a54:	21 2c       	mov	r2, r1
 a56:	31 2c       	mov	r3, r1
 a58:	ff e1       	ldi	r31, 0x1F	; 31
 a5a:	f3 15       	cp	r31, r3
 a5c:	d8 f0       	brcs	.+54     	; 0xa94 <vfprintf+0xbe>
 a5e:	8b 32       	cpi	r24, 0x2B	; 43
 a60:	79 f0       	breq	.+30     	; 0xa80 <vfprintf+0xaa>
 a62:	38 f4       	brcc	.+14     	; 0xa72 <vfprintf+0x9c>
 a64:	80 32       	cpi	r24, 0x20	; 32
 a66:	79 f0       	breq	.+30     	; 0xa86 <vfprintf+0xb0>
 a68:	83 32       	cpi	r24, 0x23	; 35
 a6a:	a1 f4       	brne	.+40     	; 0xa94 <vfprintf+0xbe>
 a6c:	23 2d       	mov	r18, r3
 a6e:	20 61       	ori	r18, 0x10	; 16
 a70:	1d c0       	rjmp	.+58     	; 0xaac <vfprintf+0xd6>
 a72:	8d 32       	cpi	r24, 0x2D	; 45
 a74:	61 f0       	breq	.+24     	; 0xa8e <vfprintf+0xb8>
 a76:	80 33       	cpi	r24, 0x30	; 48
 a78:	69 f4       	brne	.+26     	; 0xa94 <vfprintf+0xbe>
 a7a:	23 2d       	mov	r18, r3
 a7c:	21 60       	ori	r18, 0x01	; 1
 a7e:	16 c0       	rjmp	.+44     	; 0xaac <vfprintf+0xd6>
 a80:	83 2d       	mov	r24, r3
 a82:	82 60       	ori	r24, 0x02	; 2
 a84:	38 2e       	mov	r3, r24
 a86:	e3 2d       	mov	r30, r3
 a88:	e4 60       	ori	r30, 0x04	; 4
 a8a:	3e 2e       	mov	r3, r30
 a8c:	2a c0       	rjmp	.+84     	; 0xae2 <vfprintf+0x10c>
 a8e:	f3 2d       	mov	r31, r3
 a90:	f8 60       	ori	r31, 0x08	; 8
 a92:	1d c0       	rjmp	.+58     	; 0xace <vfprintf+0xf8>
 a94:	37 fc       	sbrc	r3, 7
 a96:	2d c0       	rjmp	.+90     	; 0xaf2 <vfprintf+0x11c>
 a98:	20 ed       	ldi	r18, 0xD0	; 208
 a9a:	28 0f       	add	r18, r24
 a9c:	2a 30       	cpi	r18, 0x0A	; 10
 a9e:	40 f0       	brcs	.+16     	; 0xab0 <vfprintf+0xda>
 aa0:	8e 32       	cpi	r24, 0x2E	; 46
 aa2:	b9 f4       	brne	.+46     	; 0xad2 <vfprintf+0xfc>
 aa4:	36 fc       	sbrc	r3, 6
 aa6:	75 c1       	rjmp	.+746    	; 0xd92 <vfprintf+0x3bc>
 aa8:	23 2d       	mov	r18, r3
 aaa:	20 64       	ori	r18, 0x40	; 64
 aac:	32 2e       	mov	r3, r18
 aae:	19 c0       	rjmp	.+50     	; 0xae2 <vfprintf+0x10c>
 ab0:	36 fe       	sbrs	r3, 6
 ab2:	06 c0       	rjmp	.+12     	; 0xac0 <vfprintf+0xea>
 ab4:	8a e0       	ldi	r24, 0x0A	; 10
 ab6:	98 9e       	mul	r9, r24
 ab8:	20 0d       	add	r18, r0
 aba:	11 24       	eor	r1, r1
 abc:	92 2e       	mov	r9, r18
 abe:	11 c0       	rjmp	.+34     	; 0xae2 <vfprintf+0x10c>
 ac0:	ea e0       	ldi	r30, 0x0A	; 10
 ac2:	2e 9e       	mul	r2, r30
 ac4:	20 0d       	add	r18, r0
 ac6:	11 24       	eor	r1, r1
 ac8:	22 2e       	mov	r2, r18
 aca:	f3 2d       	mov	r31, r3
 acc:	f0 62       	ori	r31, 0x20	; 32
 ace:	3f 2e       	mov	r3, r31
 ad0:	08 c0       	rjmp	.+16     	; 0xae2 <vfprintf+0x10c>
 ad2:	8c 36       	cpi	r24, 0x6C	; 108
 ad4:	21 f4       	brne	.+8      	; 0xade <vfprintf+0x108>
 ad6:	83 2d       	mov	r24, r3
 ad8:	80 68       	ori	r24, 0x80	; 128
 ada:	38 2e       	mov	r3, r24
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <vfprintf+0x10c>
 ade:	88 36       	cpi	r24, 0x68	; 104
 ae0:	41 f4       	brne	.+16     	; 0xaf2 <vfprintf+0x11c>
 ae2:	f7 01       	movw	r30, r14
 ae4:	93 fd       	sbrc	r25, 3
 ae6:	85 91       	lpm	r24, Z+
 ae8:	93 ff       	sbrs	r25, 3
 aea:	81 91       	ld	r24, Z+
 aec:	7f 01       	movw	r14, r30
 aee:	81 11       	cpse	r24, r1
 af0:	b3 cf       	rjmp	.-154    	; 0xa58 <vfprintf+0x82>
 af2:	98 2f       	mov	r25, r24
 af4:	9f 7d       	andi	r25, 0xDF	; 223
 af6:	95 54       	subi	r25, 0x45	; 69
 af8:	93 30       	cpi	r25, 0x03	; 3
 afa:	28 f4       	brcc	.+10     	; 0xb06 <vfprintf+0x130>
 afc:	0c 5f       	subi	r16, 0xFC	; 252
 afe:	1f 4f       	sbci	r17, 0xFF	; 255
 b00:	9f e3       	ldi	r25, 0x3F	; 63
 b02:	99 83       	std	Y+1, r25	; 0x01
 b04:	0d c0       	rjmp	.+26     	; 0xb20 <vfprintf+0x14a>
 b06:	83 36       	cpi	r24, 0x63	; 99
 b08:	31 f0       	breq	.+12     	; 0xb16 <vfprintf+0x140>
 b0a:	83 37       	cpi	r24, 0x73	; 115
 b0c:	71 f0       	breq	.+28     	; 0xb2a <vfprintf+0x154>
 b0e:	83 35       	cpi	r24, 0x53	; 83
 b10:	09 f0       	breq	.+2      	; 0xb14 <vfprintf+0x13e>
 b12:	55 c0       	rjmp	.+170    	; 0xbbe <vfprintf+0x1e8>
 b14:	20 c0       	rjmp	.+64     	; 0xb56 <vfprintf+0x180>
 b16:	f8 01       	movw	r30, r16
 b18:	80 81       	ld	r24, Z
 b1a:	89 83       	std	Y+1, r24	; 0x01
 b1c:	0e 5f       	subi	r16, 0xFE	; 254
 b1e:	1f 4f       	sbci	r17, 0xFF	; 255
 b20:	88 24       	eor	r8, r8
 b22:	83 94       	inc	r8
 b24:	91 2c       	mov	r9, r1
 b26:	53 01       	movw	r10, r6
 b28:	12 c0       	rjmp	.+36     	; 0xb4e <vfprintf+0x178>
 b2a:	28 01       	movw	r4, r16
 b2c:	f2 e0       	ldi	r31, 0x02	; 2
 b2e:	4f 0e       	add	r4, r31
 b30:	51 1c       	adc	r5, r1
 b32:	f8 01       	movw	r30, r16
 b34:	a0 80       	ld	r10, Z
 b36:	b1 80       	ldd	r11, Z+1	; 0x01
 b38:	36 fe       	sbrs	r3, 6
 b3a:	03 c0       	rjmp	.+6      	; 0xb42 <vfprintf+0x16c>
 b3c:	69 2d       	mov	r22, r9
 b3e:	70 e0       	ldi	r23, 0x00	; 0
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <vfprintf+0x170>
 b42:	6f ef       	ldi	r22, 0xFF	; 255
 b44:	7f ef       	ldi	r23, 0xFF	; 255
 b46:	c5 01       	movw	r24, r10
 b48:	4e d1       	rcall	.+668    	; 0xde6 <strnlen>
 b4a:	4c 01       	movw	r8, r24
 b4c:	82 01       	movw	r16, r4
 b4e:	f3 2d       	mov	r31, r3
 b50:	ff 77       	andi	r31, 0x7F	; 127
 b52:	3f 2e       	mov	r3, r31
 b54:	15 c0       	rjmp	.+42     	; 0xb80 <vfprintf+0x1aa>
 b56:	28 01       	movw	r4, r16
 b58:	22 e0       	ldi	r18, 0x02	; 2
 b5a:	42 0e       	add	r4, r18
 b5c:	51 1c       	adc	r5, r1
 b5e:	f8 01       	movw	r30, r16
 b60:	a0 80       	ld	r10, Z
 b62:	b1 80       	ldd	r11, Z+1	; 0x01
 b64:	36 fe       	sbrs	r3, 6
 b66:	03 c0       	rjmp	.+6      	; 0xb6e <vfprintf+0x198>
 b68:	69 2d       	mov	r22, r9
 b6a:	70 e0       	ldi	r23, 0x00	; 0
 b6c:	02 c0       	rjmp	.+4      	; 0xb72 <vfprintf+0x19c>
 b6e:	6f ef       	ldi	r22, 0xFF	; 255
 b70:	7f ef       	ldi	r23, 0xFF	; 255
 b72:	c5 01       	movw	r24, r10
 b74:	2d d1       	rcall	.+602    	; 0xdd0 <strnlen_P>
 b76:	4c 01       	movw	r8, r24
 b78:	f3 2d       	mov	r31, r3
 b7a:	f0 68       	ori	r31, 0x80	; 128
 b7c:	3f 2e       	mov	r3, r31
 b7e:	82 01       	movw	r16, r4
 b80:	33 fc       	sbrc	r3, 3
 b82:	19 c0       	rjmp	.+50     	; 0xbb6 <vfprintf+0x1e0>
 b84:	82 2d       	mov	r24, r2
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	88 16       	cp	r8, r24
 b8a:	99 06       	cpc	r9, r25
 b8c:	a0 f4       	brcc	.+40     	; 0xbb6 <vfprintf+0x1e0>
 b8e:	b6 01       	movw	r22, r12
 b90:	80 e2       	ldi	r24, 0x20	; 32
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	33 d1       	rcall	.+614    	; 0xdfc <fputc>
 b96:	2a 94       	dec	r2
 b98:	f5 cf       	rjmp	.-22     	; 0xb84 <vfprintf+0x1ae>
 b9a:	f5 01       	movw	r30, r10
 b9c:	37 fc       	sbrc	r3, 7
 b9e:	85 91       	lpm	r24, Z+
 ba0:	37 fe       	sbrs	r3, 7
 ba2:	81 91       	ld	r24, Z+
 ba4:	5f 01       	movw	r10, r30
 ba6:	b6 01       	movw	r22, r12
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	28 d1       	rcall	.+592    	; 0xdfc <fputc>
 bac:	21 10       	cpse	r2, r1
 bae:	2a 94       	dec	r2
 bb0:	21 e0       	ldi	r18, 0x01	; 1
 bb2:	82 1a       	sub	r8, r18
 bb4:	91 08       	sbc	r9, r1
 bb6:	81 14       	cp	r8, r1
 bb8:	91 04       	cpc	r9, r1
 bba:	79 f7       	brne	.-34     	; 0xb9a <vfprintf+0x1c4>
 bbc:	e1 c0       	rjmp	.+450    	; 0xd80 <vfprintf+0x3aa>
 bbe:	84 36       	cpi	r24, 0x64	; 100
 bc0:	11 f0       	breq	.+4      	; 0xbc6 <vfprintf+0x1f0>
 bc2:	89 36       	cpi	r24, 0x69	; 105
 bc4:	39 f5       	brne	.+78     	; 0xc14 <vfprintf+0x23e>
 bc6:	f8 01       	movw	r30, r16
 bc8:	37 fe       	sbrs	r3, 7
 bca:	07 c0       	rjmp	.+14     	; 0xbda <vfprintf+0x204>
 bcc:	60 81       	ld	r22, Z
 bce:	71 81       	ldd	r23, Z+1	; 0x01
 bd0:	82 81       	ldd	r24, Z+2	; 0x02
 bd2:	93 81       	ldd	r25, Z+3	; 0x03
 bd4:	0c 5f       	subi	r16, 0xFC	; 252
 bd6:	1f 4f       	sbci	r17, 0xFF	; 255
 bd8:	08 c0       	rjmp	.+16     	; 0xbea <vfprintf+0x214>
 bda:	60 81       	ld	r22, Z
 bdc:	71 81       	ldd	r23, Z+1	; 0x01
 bde:	07 2e       	mov	r0, r23
 be0:	00 0c       	add	r0, r0
 be2:	88 0b       	sbc	r24, r24
 be4:	99 0b       	sbc	r25, r25
 be6:	0e 5f       	subi	r16, 0xFE	; 254
 be8:	1f 4f       	sbci	r17, 0xFF	; 255
 bea:	f3 2d       	mov	r31, r3
 bec:	ff 76       	andi	r31, 0x6F	; 111
 bee:	3f 2e       	mov	r3, r31
 bf0:	97 ff       	sbrs	r25, 7
 bf2:	09 c0       	rjmp	.+18     	; 0xc06 <vfprintf+0x230>
 bf4:	90 95       	com	r25
 bf6:	80 95       	com	r24
 bf8:	70 95       	com	r23
 bfa:	61 95       	neg	r22
 bfc:	7f 4f       	sbci	r23, 0xFF	; 255
 bfe:	8f 4f       	sbci	r24, 0xFF	; 255
 c00:	9f 4f       	sbci	r25, 0xFF	; 255
 c02:	f0 68       	ori	r31, 0x80	; 128
 c04:	3f 2e       	mov	r3, r31
 c06:	2a e0       	ldi	r18, 0x0A	; 10
 c08:	30 e0       	ldi	r19, 0x00	; 0
 c0a:	a3 01       	movw	r20, r6
 c0c:	33 d1       	rcall	.+614    	; 0xe74 <__ultoa_invert>
 c0e:	88 2e       	mov	r8, r24
 c10:	86 18       	sub	r8, r6
 c12:	44 c0       	rjmp	.+136    	; 0xc9c <vfprintf+0x2c6>
 c14:	85 37       	cpi	r24, 0x75	; 117
 c16:	31 f4       	brne	.+12     	; 0xc24 <vfprintf+0x24e>
 c18:	23 2d       	mov	r18, r3
 c1a:	2f 7e       	andi	r18, 0xEF	; 239
 c1c:	b2 2e       	mov	r11, r18
 c1e:	2a e0       	ldi	r18, 0x0A	; 10
 c20:	30 e0       	ldi	r19, 0x00	; 0
 c22:	25 c0       	rjmp	.+74     	; 0xc6e <vfprintf+0x298>
 c24:	93 2d       	mov	r25, r3
 c26:	99 7f       	andi	r25, 0xF9	; 249
 c28:	b9 2e       	mov	r11, r25
 c2a:	8f 36       	cpi	r24, 0x6F	; 111
 c2c:	c1 f0       	breq	.+48     	; 0xc5e <vfprintf+0x288>
 c2e:	18 f4       	brcc	.+6      	; 0xc36 <vfprintf+0x260>
 c30:	88 35       	cpi	r24, 0x58	; 88
 c32:	79 f0       	breq	.+30     	; 0xc52 <vfprintf+0x27c>
 c34:	ae c0       	rjmp	.+348    	; 0xd92 <vfprintf+0x3bc>
 c36:	80 37       	cpi	r24, 0x70	; 112
 c38:	19 f0       	breq	.+6      	; 0xc40 <vfprintf+0x26a>
 c3a:	88 37       	cpi	r24, 0x78	; 120
 c3c:	21 f0       	breq	.+8      	; 0xc46 <vfprintf+0x270>
 c3e:	a9 c0       	rjmp	.+338    	; 0xd92 <vfprintf+0x3bc>
 c40:	e9 2f       	mov	r30, r25
 c42:	e0 61       	ori	r30, 0x10	; 16
 c44:	be 2e       	mov	r11, r30
 c46:	b4 fe       	sbrs	r11, 4
 c48:	0d c0       	rjmp	.+26     	; 0xc64 <vfprintf+0x28e>
 c4a:	fb 2d       	mov	r31, r11
 c4c:	f4 60       	ori	r31, 0x04	; 4
 c4e:	bf 2e       	mov	r11, r31
 c50:	09 c0       	rjmp	.+18     	; 0xc64 <vfprintf+0x28e>
 c52:	34 fe       	sbrs	r3, 4
 c54:	0a c0       	rjmp	.+20     	; 0xc6a <vfprintf+0x294>
 c56:	29 2f       	mov	r18, r25
 c58:	26 60       	ori	r18, 0x06	; 6
 c5a:	b2 2e       	mov	r11, r18
 c5c:	06 c0       	rjmp	.+12     	; 0xc6a <vfprintf+0x294>
 c5e:	28 e0       	ldi	r18, 0x08	; 8
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	05 c0       	rjmp	.+10     	; 0xc6e <vfprintf+0x298>
 c64:	20 e1       	ldi	r18, 0x10	; 16
 c66:	30 e0       	ldi	r19, 0x00	; 0
 c68:	02 c0       	rjmp	.+4      	; 0xc6e <vfprintf+0x298>
 c6a:	20 e1       	ldi	r18, 0x10	; 16
 c6c:	32 e0       	ldi	r19, 0x02	; 2
 c6e:	f8 01       	movw	r30, r16
 c70:	b7 fe       	sbrs	r11, 7
 c72:	07 c0       	rjmp	.+14     	; 0xc82 <vfprintf+0x2ac>
 c74:	60 81       	ld	r22, Z
 c76:	71 81       	ldd	r23, Z+1	; 0x01
 c78:	82 81       	ldd	r24, Z+2	; 0x02
 c7a:	93 81       	ldd	r25, Z+3	; 0x03
 c7c:	0c 5f       	subi	r16, 0xFC	; 252
 c7e:	1f 4f       	sbci	r17, 0xFF	; 255
 c80:	06 c0       	rjmp	.+12     	; 0xc8e <vfprintf+0x2b8>
 c82:	60 81       	ld	r22, Z
 c84:	71 81       	ldd	r23, Z+1	; 0x01
 c86:	80 e0       	ldi	r24, 0x00	; 0
 c88:	90 e0       	ldi	r25, 0x00	; 0
 c8a:	0e 5f       	subi	r16, 0xFE	; 254
 c8c:	1f 4f       	sbci	r17, 0xFF	; 255
 c8e:	a3 01       	movw	r20, r6
 c90:	f1 d0       	rcall	.+482    	; 0xe74 <__ultoa_invert>
 c92:	88 2e       	mov	r8, r24
 c94:	86 18       	sub	r8, r6
 c96:	fb 2d       	mov	r31, r11
 c98:	ff 77       	andi	r31, 0x7F	; 127
 c9a:	3f 2e       	mov	r3, r31
 c9c:	36 fe       	sbrs	r3, 6
 c9e:	0d c0       	rjmp	.+26     	; 0xcba <vfprintf+0x2e4>
 ca0:	23 2d       	mov	r18, r3
 ca2:	2e 7f       	andi	r18, 0xFE	; 254
 ca4:	a2 2e       	mov	r10, r18
 ca6:	89 14       	cp	r8, r9
 ca8:	58 f4       	brcc	.+22     	; 0xcc0 <vfprintf+0x2ea>
 caa:	34 fe       	sbrs	r3, 4
 cac:	0b c0       	rjmp	.+22     	; 0xcc4 <vfprintf+0x2ee>
 cae:	32 fc       	sbrc	r3, 2
 cb0:	09 c0       	rjmp	.+18     	; 0xcc4 <vfprintf+0x2ee>
 cb2:	83 2d       	mov	r24, r3
 cb4:	8e 7e       	andi	r24, 0xEE	; 238
 cb6:	a8 2e       	mov	r10, r24
 cb8:	05 c0       	rjmp	.+10     	; 0xcc4 <vfprintf+0x2ee>
 cba:	b8 2c       	mov	r11, r8
 cbc:	a3 2c       	mov	r10, r3
 cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <vfprintf+0x2f0>
 cc0:	b8 2c       	mov	r11, r8
 cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <vfprintf+0x2f0>
 cc4:	b9 2c       	mov	r11, r9
 cc6:	a4 fe       	sbrs	r10, 4
 cc8:	0f c0       	rjmp	.+30     	; 0xce8 <vfprintf+0x312>
 cca:	fe 01       	movw	r30, r28
 ccc:	e8 0d       	add	r30, r8
 cce:	f1 1d       	adc	r31, r1
 cd0:	80 81       	ld	r24, Z
 cd2:	80 33       	cpi	r24, 0x30	; 48
 cd4:	21 f4       	brne	.+8      	; 0xcde <vfprintf+0x308>
 cd6:	9a 2d       	mov	r25, r10
 cd8:	99 7e       	andi	r25, 0xE9	; 233
 cda:	a9 2e       	mov	r10, r25
 cdc:	09 c0       	rjmp	.+18     	; 0xcf0 <vfprintf+0x31a>
 cde:	a2 fe       	sbrs	r10, 2
 ce0:	06 c0       	rjmp	.+12     	; 0xcee <vfprintf+0x318>
 ce2:	b3 94       	inc	r11
 ce4:	b3 94       	inc	r11
 ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <vfprintf+0x31a>
 ce8:	8a 2d       	mov	r24, r10
 cea:	86 78       	andi	r24, 0x86	; 134
 cec:	09 f0       	breq	.+2      	; 0xcf0 <vfprintf+0x31a>
 cee:	b3 94       	inc	r11
 cf0:	a3 fc       	sbrc	r10, 3
 cf2:	10 c0       	rjmp	.+32     	; 0xd14 <vfprintf+0x33e>
 cf4:	a0 fe       	sbrs	r10, 0
 cf6:	06 c0       	rjmp	.+12     	; 0xd04 <vfprintf+0x32e>
 cf8:	b2 14       	cp	r11, r2
 cfa:	80 f4       	brcc	.+32     	; 0xd1c <vfprintf+0x346>
 cfc:	28 0c       	add	r2, r8
 cfe:	92 2c       	mov	r9, r2
 d00:	9b 18       	sub	r9, r11
 d02:	0d c0       	rjmp	.+26     	; 0xd1e <vfprintf+0x348>
 d04:	b2 14       	cp	r11, r2
 d06:	58 f4       	brcc	.+22     	; 0xd1e <vfprintf+0x348>
 d08:	b6 01       	movw	r22, r12
 d0a:	80 e2       	ldi	r24, 0x20	; 32
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	76 d0       	rcall	.+236    	; 0xdfc <fputc>
 d10:	b3 94       	inc	r11
 d12:	f8 cf       	rjmp	.-16     	; 0xd04 <vfprintf+0x32e>
 d14:	b2 14       	cp	r11, r2
 d16:	18 f4       	brcc	.+6      	; 0xd1e <vfprintf+0x348>
 d18:	2b 18       	sub	r2, r11
 d1a:	02 c0       	rjmp	.+4      	; 0xd20 <vfprintf+0x34a>
 d1c:	98 2c       	mov	r9, r8
 d1e:	21 2c       	mov	r2, r1
 d20:	a4 fe       	sbrs	r10, 4
 d22:	0f c0       	rjmp	.+30     	; 0xd42 <vfprintf+0x36c>
 d24:	b6 01       	movw	r22, r12
 d26:	80 e3       	ldi	r24, 0x30	; 48
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	68 d0       	rcall	.+208    	; 0xdfc <fputc>
 d2c:	a2 fe       	sbrs	r10, 2
 d2e:	16 c0       	rjmp	.+44     	; 0xd5c <vfprintf+0x386>
 d30:	a1 fc       	sbrc	r10, 1
 d32:	03 c0       	rjmp	.+6      	; 0xd3a <vfprintf+0x364>
 d34:	88 e7       	ldi	r24, 0x78	; 120
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	02 c0       	rjmp	.+4      	; 0xd3e <vfprintf+0x368>
 d3a:	88 e5       	ldi	r24, 0x58	; 88
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	b6 01       	movw	r22, r12
 d40:	0c c0       	rjmp	.+24     	; 0xd5a <vfprintf+0x384>
 d42:	8a 2d       	mov	r24, r10
 d44:	86 78       	andi	r24, 0x86	; 134
 d46:	51 f0       	breq	.+20     	; 0xd5c <vfprintf+0x386>
 d48:	a1 fe       	sbrs	r10, 1
 d4a:	02 c0       	rjmp	.+4      	; 0xd50 <vfprintf+0x37a>
 d4c:	8b e2       	ldi	r24, 0x2B	; 43
 d4e:	01 c0       	rjmp	.+2      	; 0xd52 <vfprintf+0x37c>
 d50:	80 e2       	ldi	r24, 0x20	; 32
 d52:	a7 fc       	sbrc	r10, 7
 d54:	8d e2       	ldi	r24, 0x2D	; 45
 d56:	b6 01       	movw	r22, r12
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	50 d0       	rcall	.+160    	; 0xdfc <fputc>
 d5c:	89 14       	cp	r8, r9
 d5e:	30 f4       	brcc	.+12     	; 0xd6c <vfprintf+0x396>
 d60:	b6 01       	movw	r22, r12
 d62:	80 e3       	ldi	r24, 0x30	; 48
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	4a d0       	rcall	.+148    	; 0xdfc <fputc>
 d68:	9a 94       	dec	r9
 d6a:	f8 cf       	rjmp	.-16     	; 0xd5c <vfprintf+0x386>
 d6c:	8a 94       	dec	r8
 d6e:	f3 01       	movw	r30, r6
 d70:	e8 0d       	add	r30, r8
 d72:	f1 1d       	adc	r31, r1
 d74:	80 81       	ld	r24, Z
 d76:	b6 01       	movw	r22, r12
 d78:	90 e0       	ldi	r25, 0x00	; 0
 d7a:	40 d0       	rcall	.+128    	; 0xdfc <fputc>
 d7c:	81 10       	cpse	r8, r1
 d7e:	f6 cf       	rjmp	.-20     	; 0xd6c <vfprintf+0x396>
 d80:	22 20       	and	r2, r2
 d82:	09 f4       	brne	.+2      	; 0xd86 <vfprintf+0x3b0>
 d84:	4e ce       	rjmp	.-868    	; 0xa22 <vfprintf+0x4c>
 d86:	b6 01       	movw	r22, r12
 d88:	80 e2       	ldi	r24, 0x20	; 32
 d8a:	90 e0       	ldi	r25, 0x00	; 0
 d8c:	37 d0       	rcall	.+110    	; 0xdfc <fputc>
 d8e:	2a 94       	dec	r2
 d90:	f7 cf       	rjmp	.-18     	; 0xd80 <vfprintf+0x3aa>
 d92:	f6 01       	movw	r30, r12
 d94:	86 81       	ldd	r24, Z+6	; 0x06
 d96:	97 81       	ldd	r25, Z+7	; 0x07
 d98:	02 c0       	rjmp	.+4      	; 0xd9e <vfprintf+0x3c8>
 d9a:	8f ef       	ldi	r24, 0xFF	; 255
 d9c:	9f ef       	ldi	r25, 0xFF	; 255
 d9e:	2b 96       	adiw	r28, 0x0b	; 11
 da0:	0f b6       	in	r0, 0x3f	; 63
 da2:	f8 94       	cli
 da4:	de bf       	out	0x3e, r29	; 62
 da6:	0f be       	out	0x3f, r0	; 63
 da8:	cd bf       	out	0x3d, r28	; 61
 daa:	df 91       	pop	r29
 dac:	cf 91       	pop	r28
 dae:	1f 91       	pop	r17
 db0:	0f 91       	pop	r16
 db2:	ff 90       	pop	r15
 db4:	ef 90       	pop	r14
 db6:	df 90       	pop	r13
 db8:	cf 90       	pop	r12
 dba:	bf 90       	pop	r11
 dbc:	af 90       	pop	r10
 dbe:	9f 90       	pop	r9
 dc0:	8f 90       	pop	r8
 dc2:	7f 90       	pop	r7
 dc4:	6f 90       	pop	r6
 dc6:	5f 90       	pop	r5
 dc8:	4f 90       	pop	r4
 dca:	3f 90       	pop	r3
 dcc:	2f 90       	pop	r2
 dce:	08 95       	ret

00000dd0 <strnlen_P>:
 dd0:	fc 01       	movw	r30, r24
 dd2:	05 90       	lpm	r0, Z+
 dd4:	61 50       	subi	r22, 0x01	; 1
 dd6:	70 40       	sbci	r23, 0x00	; 0
 dd8:	01 10       	cpse	r0, r1
 dda:	d8 f7       	brcc	.-10     	; 0xdd2 <strnlen_P+0x2>
 ddc:	80 95       	com	r24
 dde:	90 95       	com	r25
 de0:	8e 0f       	add	r24, r30
 de2:	9f 1f       	adc	r25, r31
 de4:	08 95       	ret

00000de6 <strnlen>:
 de6:	fc 01       	movw	r30, r24
 de8:	61 50       	subi	r22, 0x01	; 1
 dea:	70 40       	sbci	r23, 0x00	; 0
 dec:	01 90       	ld	r0, Z+
 dee:	01 10       	cpse	r0, r1
 df0:	d8 f7       	brcc	.-10     	; 0xde8 <strnlen+0x2>
 df2:	80 95       	com	r24
 df4:	90 95       	com	r25
 df6:	8e 0f       	add	r24, r30
 df8:	9f 1f       	adc	r25, r31
 dfa:	08 95       	ret

00000dfc <fputc>:
 dfc:	0f 93       	push	r16
 dfe:	1f 93       	push	r17
 e00:	cf 93       	push	r28
 e02:	df 93       	push	r29
 e04:	fb 01       	movw	r30, r22
 e06:	23 81       	ldd	r18, Z+3	; 0x03
 e08:	21 fd       	sbrc	r18, 1
 e0a:	03 c0       	rjmp	.+6      	; 0xe12 <fputc+0x16>
 e0c:	8f ef       	ldi	r24, 0xFF	; 255
 e0e:	9f ef       	ldi	r25, 0xFF	; 255
 e10:	2c c0       	rjmp	.+88     	; 0xe6a <fputc+0x6e>
 e12:	22 ff       	sbrs	r18, 2
 e14:	16 c0       	rjmp	.+44     	; 0xe42 <fputc+0x46>
 e16:	46 81       	ldd	r20, Z+6	; 0x06
 e18:	57 81       	ldd	r21, Z+7	; 0x07
 e1a:	24 81       	ldd	r18, Z+4	; 0x04
 e1c:	35 81       	ldd	r19, Z+5	; 0x05
 e1e:	42 17       	cp	r20, r18
 e20:	53 07       	cpc	r21, r19
 e22:	44 f4       	brge	.+16     	; 0xe34 <fputc+0x38>
 e24:	a0 81       	ld	r26, Z
 e26:	b1 81       	ldd	r27, Z+1	; 0x01
 e28:	9d 01       	movw	r18, r26
 e2a:	2f 5f       	subi	r18, 0xFF	; 255
 e2c:	3f 4f       	sbci	r19, 0xFF	; 255
 e2e:	31 83       	std	Z+1, r19	; 0x01
 e30:	20 83       	st	Z, r18
 e32:	8c 93       	st	X, r24
 e34:	26 81       	ldd	r18, Z+6	; 0x06
 e36:	37 81       	ldd	r19, Z+7	; 0x07
 e38:	2f 5f       	subi	r18, 0xFF	; 255
 e3a:	3f 4f       	sbci	r19, 0xFF	; 255
 e3c:	37 83       	std	Z+7, r19	; 0x07
 e3e:	26 83       	std	Z+6, r18	; 0x06
 e40:	14 c0       	rjmp	.+40     	; 0xe6a <fputc+0x6e>
 e42:	8b 01       	movw	r16, r22
 e44:	ec 01       	movw	r28, r24
 e46:	fb 01       	movw	r30, r22
 e48:	00 84       	ldd	r0, Z+8	; 0x08
 e4a:	f1 85       	ldd	r31, Z+9	; 0x09
 e4c:	e0 2d       	mov	r30, r0
 e4e:	09 95       	icall
 e50:	89 2b       	or	r24, r25
 e52:	e1 f6       	brne	.-72     	; 0xe0c <fputc+0x10>
 e54:	d8 01       	movw	r26, r16
 e56:	16 96       	adiw	r26, 0x06	; 6
 e58:	8d 91       	ld	r24, X+
 e5a:	9c 91       	ld	r25, X
 e5c:	17 97       	sbiw	r26, 0x07	; 7
 e5e:	01 96       	adiw	r24, 0x01	; 1
 e60:	17 96       	adiw	r26, 0x07	; 7
 e62:	9c 93       	st	X, r25
 e64:	8e 93       	st	-X, r24
 e66:	16 97       	sbiw	r26, 0x06	; 6
 e68:	ce 01       	movw	r24, r28
 e6a:	df 91       	pop	r29
 e6c:	cf 91       	pop	r28
 e6e:	1f 91       	pop	r17
 e70:	0f 91       	pop	r16
 e72:	08 95       	ret

00000e74 <__ultoa_invert>:
 e74:	fa 01       	movw	r30, r20
 e76:	aa 27       	eor	r26, r26
 e78:	28 30       	cpi	r18, 0x08	; 8
 e7a:	51 f1       	breq	.+84     	; 0xed0 <__ultoa_invert+0x5c>
 e7c:	20 31       	cpi	r18, 0x10	; 16
 e7e:	81 f1       	breq	.+96     	; 0xee0 <__ultoa_invert+0x6c>
 e80:	e8 94       	clt
 e82:	6f 93       	push	r22
 e84:	6e 7f       	andi	r22, 0xFE	; 254
 e86:	6e 5f       	subi	r22, 0xFE	; 254
 e88:	7f 4f       	sbci	r23, 0xFF	; 255
 e8a:	8f 4f       	sbci	r24, 0xFF	; 255
 e8c:	9f 4f       	sbci	r25, 0xFF	; 255
 e8e:	af 4f       	sbci	r26, 0xFF	; 255
 e90:	b1 e0       	ldi	r27, 0x01	; 1
 e92:	3e d0       	rcall	.+124    	; 0xf10 <__ultoa_invert+0x9c>
 e94:	b4 e0       	ldi	r27, 0x04	; 4
 e96:	3c d0       	rcall	.+120    	; 0xf10 <__ultoa_invert+0x9c>
 e98:	67 0f       	add	r22, r23
 e9a:	78 1f       	adc	r23, r24
 e9c:	89 1f       	adc	r24, r25
 e9e:	9a 1f       	adc	r25, r26
 ea0:	a1 1d       	adc	r26, r1
 ea2:	68 0f       	add	r22, r24
 ea4:	79 1f       	adc	r23, r25
 ea6:	8a 1f       	adc	r24, r26
 ea8:	91 1d       	adc	r25, r1
 eaa:	a1 1d       	adc	r26, r1
 eac:	6a 0f       	add	r22, r26
 eae:	71 1d       	adc	r23, r1
 eb0:	81 1d       	adc	r24, r1
 eb2:	91 1d       	adc	r25, r1
 eb4:	a1 1d       	adc	r26, r1
 eb6:	20 d0       	rcall	.+64     	; 0xef8 <__ultoa_invert+0x84>
 eb8:	09 f4       	brne	.+2      	; 0xebc <__ultoa_invert+0x48>
 eba:	68 94       	set
 ebc:	3f 91       	pop	r19
 ebe:	2a e0       	ldi	r18, 0x0A	; 10
 ec0:	26 9f       	mul	r18, r22
 ec2:	11 24       	eor	r1, r1
 ec4:	30 19       	sub	r19, r0
 ec6:	30 5d       	subi	r19, 0xD0	; 208
 ec8:	31 93       	st	Z+, r19
 eca:	de f6       	brtc	.-74     	; 0xe82 <__ultoa_invert+0xe>
 ecc:	cf 01       	movw	r24, r30
 ece:	08 95       	ret
 ed0:	46 2f       	mov	r20, r22
 ed2:	47 70       	andi	r20, 0x07	; 7
 ed4:	40 5d       	subi	r20, 0xD0	; 208
 ed6:	41 93       	st	Z+, r20
 ed8:	b3 e0       	ldi	r27, 0x03	; 3
 eda:	0f d0       	rcall	.+30     	; 0xefa <__ultoa_invert+0x86>
 edc:	c9 f7       	brne	.-14     	; 0xed0 <__ultoa_invert+0x5c>
 ede:	f6 cf       	rjmp	.-20     	; 0xecc <__ultoa_invert+0x58>
 ee0:	46 2f       	mov	r20, r22
 ee2:	4f 70       	andi	r20, 0x0F	; 15
 ee4:	40 5d       	subi	r20, 0xD0	; 208
 ee6:	4a 33       	cpi	r20, 0x3A	; 58
 ee8:	18 f0       	brcs	.+6      	; 0xef0 <__ultoa_invert+0x7c>
 eea:	49 5d       	subi	r20, 0xD9	; 217
 eec:	31 fd       	sbrc	r19, 1
 eee:	40 52       	subi	r20, 0x20	; 32
 ef0:	41 93       	st	Z+, r20
 ef2:	02 d0       	rcall	.+4      	; 0xef8 <__ultoa_invert+0x84>
 ef4:	a9 f7       	brne	.-22     	; 0xee0 <__ultoa_invert+0x6c>
 ef6:	ea cf       	rjmp	.-44     	; 0xecc <__ultoa_invert+0x58>
 ef8:	b4 e0       	ldi	r27, 0x04	; 4
 efa:	a6 95       	lsr	r26
 efc:	97 95       	ror	r25
 efe:	87 95       	ror	r24
 f00:	77 95       	ror	r23
 f02:	67 95       	ror	r22
 f04:	ba 95       	dec	r27
 f06:	c9 f7       	brne	.-14     	; 0xefa <__ultoa_invert+0x86>
 f08:	00 97       	sbiw	r24, 0x00	; 0
 f0a:	61 05       	cpc	r22, r1
 f0c:	71 05       	cpc	r23, r1
 f0e:	08 95       	ret
 f10:	9b 01       	movw	r18, r22
 f12:	ac 01       	movw	r20, r24
 f14:	0a 2e       	mov	r0, r26
 f16:	06 94       	lsr	r0
 f18:	57 95       	ror	r21
 f1a:	47 95       	ror	r20
 f1c:	37 95       	ror	r19
 f1e:	27 95       	ror	r18
 f20:	ba 95       	dec	r27
 f22:	c9 f7       	brne	.-14     	; 0xf16 <__ultoa_invert+0xa2>
 f24:	62 0f       	add	r22, r18
 f26:	73 1f       	adc	r23, r19
 f28:	84 1f       	adc	r24, r20
 f2a:	95 1f       	adc	r25, r21
 f2c:	a0 1d       	adc	r26, r0
 f2e:	08 95       	ret

00000f30 <_exit>:
 f30:	f8 94       	cli

00000f32 <__stop_program>:
 f32:	ff cf       	rjmp	.-2      	; 0xf32 <__stop_program>
